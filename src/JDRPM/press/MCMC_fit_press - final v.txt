############# start MCMC algorithm #############
println(replace(string(now()),"T" => " ")[1:end-4])
println("Starting MCMC algorithm")

t_start = now()
progresso = Progress(round(Int64(draws)),
		showspeed=true,
		output=stdout, # default is stderr, which turns out in orange color on R
		dt=1, # every how many seconds update the feedback
		barlen=0 # no progress bar
		)

@inbounds for i in 1:draws
	############# sample the missing values #############
	# from the "update rho" section onwards also the Y[j,t] will be needed (to compute weights, update laws, etc)
	# so we need now to simulate the values for the data which are missing (from their full conditional)
	if Y_has_NA
		# we have to use the missing_idxs to remember which units and at which times had a missing value,
		# in order to simulate just them and instead use the given value for the other units and times
		for (j,t) in missing_idxs
			# Problem: if when filling a NA we occur in another NA value? eg when we also need Y[j,t±1]
			# I decided here to set that value to 0, if occurs, since anyway target should be centered
			# so it seems a reasonable patch
			# We could have decided to ignore this computation and just use the likelihood as proposal
			# filling distribution, but this would have just worked in the Y[j,t+1] case so the general
			# problem would have still been there

			c_it = Si_iter[j,t]
			Xlk_term_t = (lk_xPPM ? dot(view(Xlk_covariates,j,:,t), beta_iter[t]) : 0)
			aux1 = eta1_iter[j]^2

			if t==1	
				c_itp1 = Si_iter[j,t+1]
				Xlk_term_tp1 = (lk_xPPM ? dot(view(Xlk_covariates,j,:,t+1), beta_iter[t+1]) : 0)

				sig2_post = 1 / (1/sig2h_iter[c_it,t] + aux1/(sig2h_iter[c_itp1,t+1]*(1-aux1)))
				mu_post = sig2_post * ( 
					(1/sig2h_iter[c_it,t])*(muh_iter[c_it,t] + Xlk_term_t) +
					(eta1_iter[j]/(sig2h_iter[c_itp1,t+1]*(1-aux1)))*((ismissing(Y[j,t+1]) ? 0 : Y[j,t+1]) - muh_iter[c_itp1,t+1] - Xlk_term_tp1)
					)

				Y[j,t] = rand(Normal(mu_post,sqrt(sig2_post)))

			elseif 1<t<T
				c_itp1 = Si_iter[j,t+1]
				Xlk_term_tp1 = (lk_xPPM ? dot(view(Xlk_covariates,j,:,t+1), beta_iter[t+1]) : 0)

				sig2_post = (1-aux1) / (1/sig2h_iter[c_it,t] + aux1/sig2h_iter[c_itp1,t+1])
				mu_post = sig2_post * ( 
					(1/(sig2h_iter[c_it,t]*(1-aux1)))*(muh_iter[c_it,t] + eta1_iter[j]*(ismissing(Y[j,t-1]) ? 0 : Y[j,t-1]) + Xlk_term_t) +
					(eta1_iter[j]/(sig2h_iter[c_itp1,t+1]*(1-aux1)))*((ismissing(Y[j,t+1]) ? 0 : Y[j,t+1]) - muh_iter[c_itp1,t+1] - Xlk_term_tp1)
					)

				Y[j,t] = rand(Normal(mu_post,sqrt(sig2_post)))

			else # t==T
				Y[j,t] = rand(Normal(
					muh_iter[c_it,t] + eta1_iter[j]*(ismissing(Y[j,t-1]) ? 0 : Y[j,t-1]) + Xlk_term_t,
					sqrt(sig2h_iter[c_it,t]*(1-aux1))
					))
			end
		end
	end


	for t in 1:T
		############# update gamma #############
		for j in 1:n
			if t==1 
				gamma_iter[j,t] = 0
				# at the first time units get reallocated
			else
				# we want to find ρ_t^{R_t(-j)} ...
				indexes = findall_faster(jj -> jj != j && gamma_iter[jj, t] == 1, 1:n)
				Si_red = Si_iter[indexes, t]
				copy!(Si_red1, Si_red)
				push!(Si_red1, Si_iter[j,t]) # ... and ρ_t^R_t(+j)}

				# get also the reduced spatial info if sPPM model
				if sPPM
					sp1_red = @view sp1[indexes]
					sp2_red = @view sp2[indexes]
				end
				# and the reduced covariates info if cl_xPPM model
				if cl_xPPM
					Xcl_covariates_red = @view Xcl_covariates[indexes,:,t]
				end

				# compute n_red's and nclus_red's and relabel
				n_red = length(Si_red) # = "n" relative to here, i.e. the sub-partition size
				n_red1 = length(Si_red1)
				relabel!(Si_red,n_red)
				relabel!(Si_red1,n_red1)
				nclus_red = isempty(Si_red) ? 0 : maximum(Si_red) # = number of clusters
				nclus_red1 = maximum(Si_red1)

				# save the label of the current working-on unit j
				j_label = Si_red1[end]

				# compute also nh_red's
				nh_red .= 0
				nh_red1 .= 0
				for jj in 1:n_red
					nh_red[Si_red[jj]] += 1 # = numerosities for each cluster label
					nh_red1[Si_red1[jj]] += 1
				end
				nh_red1[Si_red1[end]] += 1 # account for the last added unit j, not included in the above loop

				# start computing weights
				lg_weights .= 0

				# unit j can enter an existing cluster...
				for k in 1:nclus_red

					# filter the indexes of the units of label k
					aux_idxs = findall(Si_red .== k)
					lC .= 0.
					if sPPM
						copy!(s1o, sp1_red[aux_idxs])
						copy!(s2o, sp2_red[aux_idxs])
						copy!(s1n,s1o); push!(s1n, sp1[j])
						copy!(s2n,s2o); push!(s2n, sp2[j])

						spatial_cohesion!(spatial_cohesion_idx, s1o, s2o, sp_params_struct, true, M_dp, S,1,false,lC)
						spatial_cohesion!(spatial_cohesion_idx, s1n, s2n, sp_params_struct, true, M_dp, S,2,false,lC)
					end

					lS .= 0.
					if cl_xPPM
						for p in 1:p_cl
							if isa(first(Xcl_covariates[j,p,t]),Real) # numerical covariate
								copy!(Xo, @view Xcl_covariates_red[aux_idxs,p])
								copy!(Xn, Xo); push!(Xn,Xcl_covariates[j,p,t])
								
								if covariate_similarity_idx == 4
									covariate_similarity!(covariate_similarity_idx, Xo, cv_params_sim4[p], Rs[p,t], true,1,true,lS,cv_weight)
									covariate_similarity!(covariate_similarity_idx, Xn, cv_params_sim4[p], Rs[p,t], true,2,true,lS,cv_weight)
								else 
									covariate_similarity!(covariate_similarity_idx, Xo, cv_params, Rs[p,t], true,1,true,lS,cv_weight)
									covariate_similarity!(covariate_similarity_idx, Xn, cv_params, Rs[p,t], true,2,true,lS,cv_weight)
								end
							else # categorical covariate
								copy!(Xo_cat, @view Xcl_covariates_red[aux_idxs,p])
								copy!(Xn_cat, Xo_cat); push!(Xn_cat,Xcl_covariates[j,p,t])

								covariate_similarity!(covariate_similarity_idx, Xo_cat, cv_params, Rs[p,t], true,1,true,lS,cv_weight)
								covariate_similarity!(covariate_similarity_idx, Xn_cat, cv_params, Rs[p,t], true,2,true,lS,cv_weight)
							end
						end
					end

					lg_weights[k] = log(nh_red[k]) + lC[2] - lC[1] + lS[2] - lS[1]
				end
				
				# ... or unit j can create a singleton
				lC .= 0.
				if sPPM
					spatial_cohesion!(spatial_cohesion_idx, SVector(sp1[j]), SVector(sp2[j]), sp_params_struct, true, M_dp, S,2,false,lC)
				end
				lS .= 0.
				if cl_xPPM
					for p in 1:p_cl
						if covariate_similarity_idx == 4
							covariate_similarity!(covariate_similarity_idx, SVector(Xcl_covariates[j,p,t]), cv_params_sim4[p], Rs[p,t], true, 2,true,lS,cv_weight)
						else
							covariate_similarity!(covariate_similarity_idx, SVector(Xcl_covariates[j,p,t]), cv_params, Rs[p,t], true, 2,true,lS,cv_weight)
						end
					end
				end
				lg_weights[nclus_red+1] = log_Mdp + lC[2] + lS[2]

				# now use the weights towards sampling the new gamma_jt
				max_ph = maximum(@view lg_weights[1:(nclus_red+1)])
				sum_ph = 0.0

				# exponentiate...
				for k in 1:(nclus_red+1)
					 # for numerical purposes we subract max_ph
					lg_weights[k] = exp(lg_weights[k] - max_ph)
					sum_ph += lg_weights[k]
				end
				# ... and normalize
				lg_weights ./= sum_ph

				# compute probh
				probh::Float64 = 0.0
				if time_specific_alpha==false && unit_specific_alpha==false
					probh = alpha_iter / (alpha_iter + (1 - alpha_iter) * lg_weights[j_label])
				elseif time_specific_alpha==true && unit_specific_alpha==false
					probh = alpha_iter[t] / (alpha_iter[t] + (1 - alpha_iter[t]) * lg_weights[j_label])
				elseif time_specific_alpha==false && unit_specific_alpha==true
					probh = alpha_iter[j] / (alpha_iter[j] + (1 - alpha_iter[j]) * lg_weights[j_label])
				elseif time_specific_alpha==true && unit_specific_alpha==true
					probh = alpha_iter[j,t] / (alpha_iter[j,t] + (1 - alpha_iter[j,t]) * lg_weights[j_label])
				end

				# compatibility check for gamma transition
				if gamma_iter[j, t] == 0
					# we want to find ρ_(t-1)^{R_t(+j)} ...
					indexes = findall_faster(jj -> jj==j || gamma_iter[jj, t]==1, 1:n)
					Si_comp1 = @view Si_iter[indexes, t-1]
					Si_comp2 = @view Si_iter[indexes, t] # ... and ρ_t^R_t(+j)}

					rho_comp = compatibility(Si_comp1, Si_comp2)
					if rho_comp == 0
						probh = 0.0
					end
				end
				# sample the new gamma
				gt = rand(Bernoulli(probh))
				gamma_iter[j, t] = gt
			end
		end # for j in 1:n

		############# update rho #############
		# we only update the partition for the units which can move (i.e. with gamma_jt=0)
		movable_units = findall(gamma_iter[:,t] .== 0) # fast
	
		for j in movable_units
			# remove unit j from the cluster she is currently in

			if nh[Si_iter[j,t],t] > 1 # unit j does not belong to a singleton cluster
				nh[Si_iter[j,t],t] -= 1
				# no nclus_iter[t] change since j's cluster is still alive
			else # unit j belongs to a singleton cluster
				j_label = Si_iter[j,t]
				last_label = nclus_iter[t]

				if j_label < last_label
					# here we enter if j_label is not the last label, so we need to
					# relabel clusters in order to then remove j's cluster
					# eg: units 1 2 3 4 5 j 7 -> units 1 2 3 4 5 j 7
					#     label 1 1 2 2 2 3 4    label 1 1 2 2 2 4 3

					# swap cluster labels...
					for jj in 1:n
						if Si_iter[jj, t] == last_label
							Si_iter[jj, t] = j_label
						end
					end
					Si_iter[j, t] = last_label
					# ... and cluster-specific parameters
					sig2h_iter[j_label, t], sig2h_iter[last_label, t] = sig2h_iter[last_label, t], sig2h_iter[j_label, t]
					muh_iter[j_label, t], muh_iter[last_label, t] = muh_iter[last_label, t], muh_iter[j_label, t]
					nh[j_label, t] = nh[last_label, t]
					nh[last_label, t] = 1

				end
				# remove the j-th observation and the last cluster (being j in a singleton)
				nh[last_label, t] -= 1
				nclus_iter[t] -= 1
			end

			# setup probability weights towards the sampling of rho_jt
			ph .= 0.0
			resize!(ph,nclus_iter[t]+1)
			copy!(rho_tmp, @view Si_iter[:,t])

			# compute nh_tmp (numerosities for each cluster label)
			copy!(nh_tmp, @view nh[:,t])
			# unit j contribute is already absent from the change we did above
			nclus_temp = 0
				
			# we now simulate the unit j to be assigned to one of the existing clusters...
			for k in 1:nclus_iter[t]
				rho_tmp[j] = k
				indexes = findall(gamma_iter[:,t+1] .== 1) # fast
				# we check the compatibility between ρ_t^{h=k,R_(t+1)} ...
				Si_comp1 = @view rho_tmp[indexes]
				Si_comp2 = @view Si_iter[indexes,t+1] # and ρ_(t+1)^{R_(t+1)}
				rho_comp = compatibility(Si_comp1, Si_comp2)
				
				if rho_comp != 1
					ph[k] = log(0) # assignment to cluster k is not compatible
				else
					# update params for "rho_jt = k" simulation
					nh_tmp[k] += 1
					nclus_temp = count(a->(a>0), nh_tmp) 

					lPP .= 0.
					for kk in 1:nclus_temp
						aux_idxs = findall(rho_tmp .== kk)
						if sPPM
							copy!(s1n, @view sp1[aux_idxs])
							copy!(s2n, @view sp2[aux_idxs])
							spatial_cohesion!(spatial_cohesion_idx, s1n, s2n, sp_params_struct, true, M_dp, S,1,true,lPP)
						end
						if cl_xPPM
							for p in 1:p_cl
								Xn_view = @view Xcl_covariates[aux_idxs,p,t]
								if covariate_similarity_idx == 4
									covariate_similarity!(covariate_similarity_idx, Xn_view, cv_params_sim4[p], Rs[p,t], true,1,true,lPP,cv_weight)
								else
									covariate_similarity!(covariate_similarity_idx, Xn_view, cv_params, Rs[p,t], true,1,true,lPP,cv_weight)
								end
							end
						end
						lPP[1] += log_Mdp + lgamma(nh_tmp[kk])
					end

					if t==1
						ph[k] = loglikelihood(Normal(
							muh_iter[k,t] + (lk_xPPM ? dot(view(Xlk_covariates,j,:,t), beta_iter[t]) : 0),
							sqrt(sig2h_iter[k,t])),
							Y[j,t]) + lPP[1]
					else
						ph[k] = loglikelihood(Normal(
							muh_iter[k,t] + eta1_iter[j]*Y[j,t-1] + (lk_xPPM ? dot(view(Xlk_covariates,j,:,t), beta_iter[t]) : 0),
							sqrt(sig2h_iter[k,t]*(1-eta1_iter[j]^2))),
							Y[j,t]) + lPP[1]
					end

					# restore params after "rho_jt = k" simulation
					nh_tmp[k] -= 1
				end
			end

			# ... plus the case of being assigned to a new (singleton for now) cluster 
			k = nclus_iter[t]+1
			rho_tmp[j] = k
			# declare (for later scope accessibility) the new params here
			muh_draw = 0.0; sig2h_draw = 0.0

			indexes = findall(gamma_iter[:,t+1] .== 1)
			Si_comp1 = @view rho_tmp[indexes]
			Si_comp2 = @view Si_iter[indexes,t+1]
			rho_comp = compatibility(Si_comp1, Si_comp2)

			if rho_comp != 1
				ph[k] = log(0) # assignment to a new cluster is not compatible
			else
				# sample new params for this new cluster
				muh_draw = rand(Normal(theta_iter[t], sqrt(tau2_iter[t])))
				sig2h_draw = rand(InverseGamma(sig2h_priors[1],sig2h_priors[2]))

				# update params for "rho_jt = k" simulation
				nh_tmp[k] += 1
				nclus_temp = count(a->(a>0), nh_tmp)

				lPP .= 0.
				for kk in 1:nclus_temp
					aux_idxs = findall(rho_tmp .== kk) # fast
					if sPPM
						copy!(s1n, @view sp1[aux_idxs])
						copy!(s2n, @view sp2[aux_idxs])
						spatial_cohesion!(spatial_cohesion_idx, s1n, s2n, sp_params_struct, true, M_dp, S,1,true,lPP)
					end
					if cl_xPPM
						for p in 1:p_cl
							Xn_view = @view Xcl_covariates[aux_idxs,p,t]
							if covariate_similarity_idx == 4
								covariate_similarity!(covariate_similarity_idx, Xn_view, cv_params_sim4[p], Rs[p,t], true,1,true,lPP,cv_weight)
							else
								covariate_similarity!(covariate_similarity_idx, Xn_view, cv_params, Rs[p,t], true,1,true,lPP,cv_weight)
							end
						end
					end
					lPP[1] += log_Mdp + lgamma(nh_tmp[kk])
				end

				if t==1
					ph[k] = loglikelihood(Normal(
						muh_draw + (lk_xPPM ? dot(view(Xlk_covariates,j,:,t), beta_iter[t]) : 0),
						sqrt(sig2h_draw)),
						Y[j,t]) + lPP[1]
				else
					ph[k] = loglikelihood(Normal(
						muh_draw + eta1_iter[j]*Y[j,t-1] + (lk_xPPM ? dot(view(Xlk_covariates,j,:,t), beta_iter[t]) : 0),
						sqrt(sig2h_draw*(1-eta1_iter[j]^2))),
						Y[j,t]) + lPP[1]
				end

				# restore params after "rho_jt = k" simulation
				nh_tmp[k] -= 1
			end

			# now exponentiate the weights...
			max_ph = maximum(ph)
			sum_ph = 0.0
			for k in eachindex(ph)
				# for numerical purposes we subract max_ph
				ph[k] = exp(ph[k] - max_ph)
				sum_ph += ph[k]
			end
			# ... and normalize them
			ph ./= sum_ph
			
			# now sample the new label Si_iter[j,t]
			u = rand(Uniform(0,1))
			cph = cumsum(ph)
			cph[end] = 1 # fix numerical problems of having sums like 0.999999etc
			new_label = 0
			for k in eachindex(ph)
				if u <= cph[k]
					new_label = k
					break
				end
			end
			
			if new_label <= nclus_iter[t]
				# we enter an existing cluster
				Si_iter[j, t] = new_label
				nh[new_label, t] += 1
			else
				# we create a new singleton cluster
				nclus_iter[t] += 1
				cl_new = nclus_iter[t]
				Si_iter[j, t] = cl_new
				nh[cl_new, t] = 1
				muh_iter[cl_new, t] = muh_draw
				sig2h_iter[cl_new, t] = sig2h_draw
			end

			# now we need to relabel after the possible mess created by the sampling
			# eg: (before sampling)  (after sampling)
			#     units j 2 3 4 5 ->  units j 2 3 4 5
			#    labels 1 1 1 2 2    labels 3 1 1 2 2
			# the after case has to be relabelled
			Si_tmp = @view Si_iter[:,t]

			relabel_full!(Si_tmp,n,Si_relab, nh_reorder, old_lab)				
			# - Si_relab gives the relabelled partition
			# - nh_reorder gives the numerosities of the relabelled partition, ie "nh_reorder[k] = #(units of new cluster k)"
			# - old_lab tells "the index in position i (which before was cluster i) is now called cluster old_lab[i]"
			# eg:             Original labels (Si): 4 2 1 1 1 3 1 4 5 
			#          Relabeled groups (Si_relab): 1 2 3 3 3 4 3 1 5
			# Reordered cluster sizes (nh_reorder): 2 1 4 1 1 0 0 0 0
			# 	              Old labels (old_lab): 4 2 1 3 5 0 0 0 0 

			# now fix everything (morally permute params)
			Si_iter[:,t] = Si_relab
			# discard the zeros at the end of the auxiliary vectors nh_reorde and old_lab
			copy!(muh_iter_copy, muh_iter)
			copy!(sig2h_iter_copy, sig2h_iter)
			len = findlast(x -> x != 0, nh_reorder)
			for k in 1:nclus_iter[t]
				muh_iter[k,t] = muh_iter_copy[old_lab[k],t]
				sig2h_iter[k,t] = sig2h_iter_copy[old_lab[k],t]
				nh[k,t] = nh_reorder[k]
			end

		end # for j in movable_units

		############# update muh #############
		if t==1
			for k in 1:nclus_iter[t]
				sum_Y = 0.0
				for j in 1:n
					if Si_iter[j,t]==k 
						sum_Y += Y[j,t] - (lk_xPPM ? dot(view(Xlk_covariates,j,:,t), beta_iter[t]) : 0.0)
					end
				end
				sig2_star = 1 / (1/tau2_iter[t] + nh[k,t]/sig2h_iter[k,t])
				mu_star = sig2_star * (theta_iter[t]/tau2_iter[t] + sum_Y/sig2h_iter[k,t])

				muh_iter[k,t] = rand(Normal(mu_star,sqrt(sig2_star)))
			end

		else # t>1
			for k in 1:nclus_iter[t]
				sum_Y = 0.0
				sum_e2 = 0.0
				for j in 1:n
					if Si_iter[j,t]==k 
						aux1 = 1 / (1-eta1_iter[j]^2)
						sum_e2 += aux1
						sum_Y += (Y[j,t] - eta1_iter[j]*Y[j,t-1] - (lk_xPPM ? dot(view(Xlk_covariates,j,:,t), beta_iter[t]) : 0.0)) * aux1
					end
				end
				sig2_star = 1 / (1/tau2_iter[t] + sum_e2/sig2h_iter[k,t]) 
				mu_star = sig2_star * (theta_iter[t]/tau2_iter[t] + sum_Y/sig2h_iter[k,t])

				muh_iter[k,t] = rand(Normal(mu_star,sqrt(sig2_star)))
			end
		end
		
		############# update sigma2h #############
		if t==1
			for k in 1:nclus_iter[t]
				a_star = sig2h_priors[1] + nh[k,t]/2
				sum_Y = 0.0
				S_kt = findall(Si_iter[:,t] .== k)
				for j in S_kt
					sum_Y += (Y[j,t] - muh_iter[k,t] - (lk_xPPM ? dot(view(Xlk_covariates,j,:,t), beta_iter[t]) : 0.0))^2
				end

				b_star = sig2h_priors[2] + sum_Y/2
				sig2h_iter[k,t] = rand(InverseGamma(a_star, b_star))
			end

		else # t>1
			for k in 1:nclus_iter[t]
				a_star = sig2h_priors[1] + nh[k,t]/2
				sum_Y = 0.0
				S_kt = findall(Si_iter[:,t] .== k)
				for j in S_kt
					sum_Y += (Y[j,t] - muh_iter[k,t] - eta1_iter[j]*Y[j,t-1] - (lk_xPPM ? dot(view(Xlk_covariates,j,:,t), beta_iter[t]) : 0.0))^2
				end

				b_star = sig2h_priors[2] + sum_Y/2
				sig2h_iter[k,t] = rand(InverseGamma(a_star, b_star))
			end
		end

		############# update beta #############
		if lk_xPPM && i>=beta_update_threshold
			if t==1
				sum_Y = zeros(p_lk)
				A_star = I(p_lk)/s2_beta
				for j in 1:n
					X_jt = @view Xlk_covariates[j,:,t]
					sum_Y += (Y[j,t] - muh_iter[Si_iter[j,t],t]) * X_jt / sig2h_iter[Si_iter[j,t],t]
					A_star += (X_jt * X_jt') / sig2h_iter[Si_iter[j,t],t]
				end
				b_star = beta0/s2_beta + sum_Y
				A_star = Symmetric(A_star)
				# Symmetric is needed for numerical problems
				# but A_star is indeed symm and pos def (by construction) so there is no problem
				beta_iter[t] = rand(MvNormalCanon(b_star, A_star))
				# this is the quicker and more accurate method

				# old method with the MvNormal and the inversion required
				# Am1_star = inv(A_star) 
				# beta_iter[t] = rand(MvNormal(inv(Symmetric(A_star))*b_star, inv(Symmetric(A_star))))
			else
				sum_Y = zeros(p_lk)
				A_star = I(p_lk)/s2_beta
				for j in 1:n
					X_jt = @view Xlk_covariates[j,:,t]
					sum_Y += (Y[j,t] - muh_iter[Si_iter[j,t],t] - eta1_iter[j]*Y[j,t-1]) * X_jt / sig2h_iter[Si_iter[j,t],t]
					A_star += (X_jt * X_jt') / sig2h_iter[Si_iter[j,t],t]
				end
				b_star = beta0/s2_beta + sum_Y
				A_star = Symmetric(A_star)
				beta_iter[t] = rand(MvNormalCanon(b_star, A_star))
			end
		end
					
		############# update theta #############
		aux1::Float64 = 1 / (lambda2_iter*(1-phi1_iter^2))
		kt = nclus_iter[t]
		sum_mu=0.0
		for k in 1:kt
			sum_mu += muh_iter[k,t]
		end

		if t==1
			sig2_post = 1 / (1/lambda2_iter + phi1_iter^2*aux1 + kt/tau2_iter[t])
			mu_post = sig2_post * (phi0_iter/lambda2_iter + sum_mu/tau2_iter[t] + (phi1_iter*(theta_iter[t+1] - (1-phi1_iter)*phi0_iter))*aux1)

			theta_iter[t] = rand(Normal(mu_post, sqrt(sig2_post)))

		elseif t==T
			sig2_post = 1 / (aux1 + kt/tau2_iter[t])
			mu_post = sig2_post * (sum_mu/tau2_iter[t] + ((1- phi1_iter)*phi0_iter + phi1_iter*theta_iter[t-1])*aux1)

			theta_iter[t] = rand(Normal(mu_post, sqrt(sig2_post)))

		else # 1<t<T
			sig2_post = 1 / ((1+phi1_iter^2)*aux1 + kt/tau2_iter[t])
			mu_post = sig2_post * (sum_mu/tau2_iter[t] + (phi1_iter*(theta_iter[t-1]+theta_iter[t+1]) + phi0_iter*(1-phi1_iter)^2)*aux1)

			theta_iter[t] = rand(Normal(mu_post, sqrt(sig2_post)))
		end 
		
		############# update tau2 #############
		kt = nclus_iter[t]
		aux1 = 0.0
		for k in 1:kt
			aux1 += (muh_iter[k,t] - theta_iter[t])^2 
		end
		a_star_tau = tau2_priors[1] + kt/2
		b_star_tau = tau2_priors[2] + aux1/2
		tau2_iter[t] = rand(InverseGamma(a_star_tau, b_star_tau))

	end # for t in 1:T
	
	############# update eta1 #############
	# the input argument eta1_priors[2] is already the std dev
	if update_eta1
		for j in 1:n
			eta1_old = eta1_iter[j]
			eta1_new = rand(Normal(eta1_old,eta1_priors[2])) # proposal value

			if (-1 <= eta1_new <= 1)
				ll_old = 0.0
				ll_new = 0.0
				for t in 2:T
					# likelihood contribution
					ll_old += loglikelihood(Normal(
						muh_iter[Si_iter[j,t],t] + eta1_old*Y[j,t-1] + (lk_xPPM ? dot(view(Xlk_covariates,j,:,t), beta_iter[t]) : 0),
						sqrt(sig2h_iter[Si_iter[j,t],t]*(1-eta1_old^2))
						), Y[j,t]) 
					ll_new += loglikelihood(Normal(
						muh_iter[Si_iter[j,t],t] + eta1_new*Y[j,t-1] + (lk_xPPM ? dot(view(Xlk_covariates,j,:,t), beta_iter[t]) : 0),
						sqrt(sig2h_iter[Si_iter[j,t],t]*(1-eta1_new^2))
						), Y[j,t]) 
				end
				logit_old = aux_logit(eta1_old) 
				logit_new = aux_logit(eta1_new) 

				# prior contribution
				ll_old += -log(2*eta1_priors[1]) -1/eta1_priors[1]*abs(logit_old)
				ll_new += -log(2*eta1_priors[1]) -1/eta1_priors[1]*abs(logit_new)

				ll_ratio = ll_new-ll_old
				u = rand(Uniform(0,1))
				if (ll_ratio > log(u))
					eta1_iter[j] = eta1_new # accept the candidate
					acceptance_ratio_eta1 += 1
				end
			end
		end
	end

	############# update alpha #############
	if update_alpha
		if time_specific_alpha==false && unit_specific_alpha==false
			# a scalar
			sumg = sum(@view gamma_iter[:,1:T])
			a_star = alpha_priors[1] + sumg
			b_star = alpha_priors[2] + n*T - sumg
			alpha_iter = rand(Beta(a_star, b_star))

		elseif time_specific_alpha==true && unit_specific_alpha==false
			# a vector in time
			for t in 1:T
				sumg = sum(@view gamma_iter[:,t])
				a_star = alpha_priors[1] + sumg
				b_star = alpha_priors[2] + n - sumg
				alpha_iter[t] = rand(Beta(a_star, b_star))
			end

		elseif time_specific_alpha==false && unit_specific_alpha==true
			# a vector in units
			for j in 1:n
				sumg = sum(@view gamma_iter[j,1:T])
				a_star = alpha_priors[1,j] + sumg
				b_star = alpha_priors[2,j] + T - sumg
				alpha_iter[j] = rand(Beta(a_star, b_star))
			end
		elseif time_specific_alpha==true && unit_specific_alpha==true
			# a matrix
			for j in 1:n
				for t in 1:T
					sumg = gamma_iter[j,t] # nothing to sum in this case
					a_star = alpha_priors[1,j] + sumg
					b_star = alpha_priors[2,j] + 1 - sumg
					alpha_iter[j,t] = rand(Beta(a_star, b_star))
				end
			end
		end
	end

	############# update phi0 #############
	aux1 = 1/lambda2_iter
	aux2 = 0.0
	for t in 2:T
		aux2 += theta_iter[t] - phi1_iter*theta_iter[t-1]
	end
	sig2_post = 1 / ( 1/phi0_priors[2] + aux1 * (1 + (T-1)*(1-phi1_iter)/(1+phi1_iter)) )
	mu_post = sig2_post * ( phi0_priors[1]/phi0_priors[2] + theta_iter[1]*aux1 + aux1/(1+phi1_iter)*aux2 )
	phi0_iter = rand(Normal(mu_post, sqrt(sig2_post)))
	
	############# update phi1 #############
	# the input argument phi1_priors is already the std dev
	if update_phi1
		phi1_old = phi1_iter
		phi1_new = rand(Normal(phi1_old, phi1_priors)) # proposal value

		if (-1 <= phi1_new <= 1)
			ll_old = 0.0; ll_new = 0.0
			for t in 2:T
				# likelihood contribution
				ll_old += loglikelihood(Normal(
					(1-phi1_old)*phi0_iter + phi1_old*theta_iter[t-1],
					sqrt(lambda2_iter*(1-phi1_old^2))
					), theta_iter[t]) 
				ll_new += loglikelihood(Normal(
					(1-phi1_new)*phi0_iter + phi1_new*theta_iter[t-1],
					sqrt(lambda2_iter*(1-phi1_new^2))
					), theta_iter[t]) 
			end

			# prior contribution
			ll_old += loglikelihood(Uniform(-1,1), phi1_old)
			ll_new += loglikelihood(Uniform(-1,1), phi1_new)

			ll_ratio = ll_new-ll_old
			u = rand(Uniform(0,1))
			if (ll_ratio > log(u))
				phi1_iter = phi1_new # accept the candidate
				acceptance_ratio_phi1 += 1
			end
		end
	end

	############# update lambda2 #############
	aux1 = 0.0
	for t in 2:T
		aux1 += (theta_iter[t] - (1-phi1_iter)*phi0_iter - phi1_iter*theta_iter[t-1])^2
	end
	a_star_lambda2 = lambda2_priors[1] + T/2
	b_star_lambda2 = lambda2_priors[2] + ((theta_iter[1] - phi0_iter)^2 + aux1) / 2
	lambda2_iter = rand(InverseGamma(a_star_lambda2,b_star_lambda2))	

	############# save MCMC iterates #############
	if i>burnin && i%thin==0 
		Si_out[:,:,i_out] = Si_iter[:,1:T]
		gamma_out[:,:,i_out] = gamma_iter[:,1:T]
		if time_specific_alpha==false && unit_specific_alpha==false
			# for each iterate, a scalar
			alpha_out[i_out] = alpha_iter
		elseif time_specific_alpha==true && unit_specific_alpha==false
			# for each iterate, a vector in time
			alpha_out[:,i_out] = alpha_iter[1:T]
		elseif time_specific_alpha==false && unit_specific_alpha==true
			# for each iterate, a vector in units
			alpha_out[:,i_out] = alpha_iter
		elseif time_specific_alpha==true && unit_specific_alpha==true
			# for each iterate, a matrix
			alpha_out[:,:,i_out] = alpha_iter[:,1:T]
		end
		for t in 1:T
			for j in 1:n
				sigma2h_out[j,t,i_out] = sig2h_iter[Si_iter[j,t],t]
				muh_out[j,t,i_out] = muh_iter[Si_iter[j,t],t]
			end
		end
		eta1_out[:,i_out] = eta1_iter
		if lk_xPPM
			for t in 1:T
				beta_out[t,:,i_out] = beta_iter[t]
			end
		end
		theta_out[:,i_out] = theta_iter[1:T]
		tau2_out[:,i_out] = tau2_iter[1:T]
		phi0_out[i_out] = phi0_iter
		phi1_out[i_out] = phi1_iter
		lambda2_out[i_out] = lambda2_iter

		############# save fitted values and metrics #############
		for j in 1:n
			for t in 1:T
				muh_jt = muh_iter[Si_iter[j,t],t]
				sig2h_jt = sig2h_iter[Si_iter[j,t],t]
				X_lk_term = lk_xPPM ? dot(view(Xlk_covariates,j,:,t), beta_iter[t]) : 0.0

				if t==1
					llike[j,t,i_out] = logpdf(Normal(
						muh_jt + X_lk_term,
						sqrt(sig2h_jt)
						), Y[j,t])
					fitted[j,t,i_out] = muh_jt + X_lk_term
				else # t>1
					llike[j,t,i_out] = logpdf(Normal(
						muh_jt + eta1_iter[j]*Y[j,t-1] + X_lk_term,
						sqrt(sig2h_jt*(1-eta1_iter[j]^2))
						), Y[j,t])
					fitted[j,t,i_out] = muh_jt + eta1_iter[j]*Y[j,t-1] + X_lk_term
				end

				mean_likelhd[j,t] += exp(llike[j,t,i_out])
				mean_loglikelhd[j,t] += llike[j,t,i_out]
				CPO[j,t] += exp(-llike[j,t,i_out])
			end
		end

		i_out += 1
	end

next!(progresso)

end # for i in 1:draws

println("\ndone!")
t_end = now()
println("Elapsed time: ", Dates.canonicalize(Dates.CompoundPeriod(t_end-t_start)))

############# compute LPML and WAIC #############
for j in 1:n
	for t in 1:T
		LPML += log(CPO[j,t])
	end
end
LPML -= n*T*log(nout) # scaling factor
LPML = -LPML # fix sign
println("LPML: ", LPML, " (the higher the better)")

# adjust mean variables
mean_likelhd ./= nout
mean_loglikelhd./= nout
for j in 1:n
	for t in 1:T
		WAIC += 2*mean_loglikelhd[j,t] - log(mean_likelhd[j,t])
	end
end
WAIC *= -2
println("WAIC: ", WAIC, " (the lower the better)")

if update_eta1 @printf "acceptance ratio eta1: %.2f%%\n" acceptance_ratio_eta1/(n*draws) *100 end
if update_phi1 @printf "acceptance ratio phi1: %.2f%%" acceptance_ratio_phi1/draws*100 end
println()

if perform_diagnostics
	chn = Chains(
		hcat(lambda2_out,phi0_out,tau2_out',theta_out',eta1_out',alpha_out'),
		["lambda2","phi0",
		[string("tau2_t", i) for i in 1:T]...,
		[string("theta_t", i) for i in 1:T]...,
		[string("eta1_j", i) for i in 1:n]...,
		[string("alpha_t", i) for i in 1:T]...,
		]
	)
	ss = DataFrame(summarystats(chn))
	println("\nDiagnostics:")
	@show ss[!,[1,4,5,6,7]];
	if logging CSV.write(log_file,ss[!,[1,4,5,6,7]]) end
end

close(log_file)

if simple_return
	return Si_out, LPML, WAIC
else
	return Si_out, Int.(gamma_out), alpha_out, sigma2h_out, muh_out, include_eta1 ? eta1_out : NaN,
		lk_xPPM ? beta_out : NaN, theta_out, tau2_out, phi0_out, include_phi1 ? phi1_out : NaN, lambda2_out,
		fitted, llike, LPML, WAIC
end
