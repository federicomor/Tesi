}
for(k in 1: LEN){
for(kk in 1: LEN){
ARImats[k,kk] <- adjustedRandIndex(rho_ARI[[k]], rho_ARI[[kk]])
}
}
ncols_ari = 100
# if (min(ARImats)<0){
# cols_ARI = colora(ncols_ari,79,0)
# brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# } else {
# cols_ARI = colora(ncols_ari,56,0)
# cols_ARI = rev(cols_ARI) # must be ordered from cold to warm
cols_ARI = rev(colora(ncols_ari,104,0)) # or 109
# cols_ARI = colora(ncols_ari,102,0)
# brks = seq(0,1,length.out=ncols_ari+1)
brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# }
# or see ?designer.colors for colors
library(fields)
image.plot(ARImats,
main=paste0("Lagged ARI values - ",model_name),axes=FALSE,col=cols_ARI,
breaks=brks)
mtext(text=c(paste("",1:LEN)), side=2, line=0.3,at=seq(0,1,length=LEN), las=1, cex=0.8)
mtext(text=c(paste("",1:LEN)), side=1, line=0.3,at=seq(0,1,length=LEN), las=2, cex=0.8)
##########################################################
# take last sample (maybe not the best choice)
yredC=t(drpm1$fitted[,,size(drpm1$fitted)[3]])
yredJ=t(rout$fitted[,,size(rout$fitted)[3]])
yred=y
cols = colora(size(yred)[1],56,0)
# cols = colora(size(yred)[1],"div",show = 0)
par(mar=c(4,4,4,2))
for(i in 1:size(yredC)[1]){
if(i==1){
plot(1:size(yredC)[2],yredC[i,],col=cols[i],
ylim=extrema(yred,yredJ,yredC),
type='l',xlab='time',ylab="fitted values",main="model C")
}
else{
lines(1:size(yredC)[2],yredC[i,],col=cols[i])
}
}
par(mar=c(4,4,4,2))
for(i in 1:size(yredJ)[1]){
if(i==1){
plot(1:size(yredJ)[2],yredJ[i,],col=cols[i],
ylim=extrema(yred,yredJ,yredC),
type='l',xlab='time',ylab="fitted values",main="model J")
}
else{
lines(1:size(yredJ)[2],yredJ[i,],col=cols[i])
}
}
# original real data
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],type='l',
xlab='time',ylab='values',main="original data",
ylim=extrema(yred,yredJ,yredC))
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
cols=colora(len=maxNClusters, seed=67, show=1)
cols=colora(len=maxNClusters, seed=67, show=1)
colora(len=maxNClusters, seed=67, show=1)
cols=colora(len=maxNClusters, seed=73, show=1) # like 67
cols=colora(len=maxNClusters, seed=67, show=1)
# cols=colora(len=maxNClusters, seed=67, show=1)
cols=colora(len=maxNClusters, seed=41, show=1) # greens/light-blues
cols=colora(len=maxNClusters, seed=32, show=1) # greens
cols=colora(len=maxNClusters, seed=73, show=1) #
cols=colora(len=maxNClusters, seed=22, show=1) # reds/blues
# cols=colora(len=maxNClusters, seed=67, show=1)
# cols=colora(len=maxNClusters, seed=41, show=0) # greens/light-blues
# cols=colora(len=maxNClusters, seed=73, show=0) # dark blues
# cols=colora(len=maxNClusters, seed=32, show=0) # viridis
cols=colora(len=maxNClusters, seed=22, show=0) # reds/blues
# cols=colora(len=maxNClusters, seed=44, show=0) # greens
# cols = colora(len=10,"rand")
heatmap_matrix <- do.call(rbind, partitions_drpmc)
# Generate the heatmap
heatmap(heatmap_matrix, Rowv = NA, Colv = NA, scale = "none",
main="model C", xlab = "units", ylab = "time instants",
# col = terrain.colors(length(unique(as.vector(heatmap_matrix)))))
col = cols)
heatmap_matrix <- do.call(rbind, partitions_drpmj)
# Generate the heatmap
heatmap(heatmap_matrix, Rowv = NA, Colv = NA, scale = "none",
main="model J",xlab = "units", ylab = "time instants",
# col = terrain.colors(length(unique(as.vector(heatmap_matrix)))))
col = cols)
####################################################################
partitions = partitions_drpmc
partition_matrix <- do.call(cbind, partitions)
num_units <- nrow(partition_matrix)
Tm <- ncol(partition_matrix)
# Set up the plot
par(mar=c(4,4,2,2))
plot(1:Tm, rep(NA, Tm), type = "n",
xlab = "Time Instants", ylab = "clusters", main="model C",
ylim = range(partition_matrix)+c(-0.1,0.1), xaxt = "n", yaxt = "n")
axis(1, at = 1:Tm, labels = 1:Tm)
axis(2, at = unique(as.vector(partition_matrix)), las = 2)
# Add grid lines for clarity
abline(h = unique(as.vector(partition_matrix)), col = "lightgray", lty = "dotted")
abline(v = 1:Tm, col = "lightgray", lty = "dotted")
# Plot lines and points for each unit
for (unit in 1:num_units) {
lines(1:Tm, partition_matrix[unit, ], type = "l", pch = 19,
col = unit, lwd = 1)
}
# legend("topright", legend = paste("Unit", 1:num_units), col = 1:num_units,
# lty = 1, lwd = 2, pch = 19, bty = "n")
partitions = partitions_drpmj
partition_matrix <- do.call(cbind, partitions)
num_units <- nrow(partition_matrix)
Tm <- ncol(partition_matrix)
# Set up the plot
par(mar=c(4,4,2,2))
plot(1:Tm, rep(NA, Tm), type = "n",
xlab = "Time Instants", ylab = "clusters", main="model J",
ylim = range(partition_matrix)+c(-0.1,0.1), xaxt = "n", yaxt = "n")
axis(1, at = 1:Tm, labels = 1:Tm)
axis(2, at = unique(as.vector(partition_matrix)), las = 2)
abline(h = unique(as.vector(partition_matrix)), col = "lightgray", lty = "dotted")
abline(v = 1:Tm, col = "lightgray", lty = "dotted")
for (unit in 1:num_units) {
lines(1:Tm, partition_matrix[unit, ], type = "l", pch = 19,
col = unit, lwd = 1)
}
# legend("topright", legend = paste("Unit", 1:num_units), col = 1:num_units,
# lty = 1, lwd = 2, pch = 19, bty = "n")
####################################################################
partitions = partitions_drpmc
partition_matrix <- do.call(cbind, partitions)
par(mar=c(3.8,1,3,1),mfrow=c(1,2))
plot(NULL, NULL, xlim = c(1, Tm), ylim = c(1, num_units)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = "model C")
axis(1, at = 1:Tm, labels = 1:Tm)
for (t in 1:Tm) {
for (unit in 1:num_units) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 0.5)
}
}
partitions = partitions_drpmj
partition_matrix <- do.call(cbind, partitions)
plot(NULL, NULL, xlim = c(1, Tm), ylim = c(1, num_units)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = "model J")
axis(1, at = 1:Tm, labels = 1:Tm)
for (t in 1:Tm) {
for (unit in 1:num_units) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 0.5)
}
}
# cols=colora(len=maxNClusters, seed=67, show=1)
# cols=colora(len=maxNClusters, seed=41, show=0) # greens/light-blues
# cols=colora(len=maxNClusters, seed=73, show=0) # dark blues
# cols=colora(len=maxNClusters, seed=32, show=0) # viridis
# cols=colora(len=maxNClusters, seed=22, show=0) # reds/blues
# cols=colora(len=maxNClusters, seed=44, show=0) # greens
cols=colora(len=maxNClusters, seed=56, show=0) # greens
# cols = colora(len=10,"rand")
heatmap_matrix <- do.call(rbind, partitions_drpmc)
# Generate the heatmap
heatmap(heatmap_matrix, Rowv = NA, Colv = NA, scale = "none",
main="model C", xlab = "units", ylab = "time instants",
# col = terrain.colors(length(unique(as.vector(heatmap_matrix)))))
col = cols)
heatmap_matrix <- do.call(rbind, partitions_drpmj)
# Generate the heatmap
heatmap(heatmap_matrix, Rowv = NA, Colv = NA, scale = "none",
main="model J",xlab = "units", ylab = "time instants",
# col = terrain.colors(length(unique(as.vector(heatmap_matrix)))))
col = cols)
####################################################################
partitions = partitions_drpmc
partition_matrix <- do.call(cbind, partitions)
num_units <- nrow(partition_matrix)
Tm <- ncol(partition_matrix)
# Set up the plot
par(mar=c(4,4,2,2))
plot(1:Tm, rep(NA, Tm), type = "n",
xlab = "Time Instants", ylab = "clusters", main="model C",
ylim = range(partition_matrix)+c(-0.1,0.1), xaxt = "n", yaxt = "n")
axis(1, at = 1:Tm, labels = 1:Tm)
axis(2, at = unique(as.vector(partition_matrix)), las = 2)
# Add grid lines for clarity
abline(h = unique(as.vector(partition_matrix)), col = "lightgray", lty = "dotted")
abline(v = 1:Tm, col = "lightgray", lty = "dotted")
# Plot lines and points for each unit
for (unit in 1:num_units) {
lines(1:Tm, partition_matrix[unit, ], type = "l", pch = 19,
col = unit, lwd = 1)
}
# legend("topright", legend = paste("Unit", 1:num_units), col = 1:num_units,
# lty = 1, lwd = 2, pch = 19, bty = "n")
partitions = partitions_drpmj
partition_matrix <- do.call(cbind, partitions)
num_units <- nrow(partition_matrix)
Tm <- ncol(partition_matrix)
# Set up the plot
par(mar=c(4,4,2,2))
plot(1:Tm, rep(NA, Tm), type = "n",
xlab = "Time Instants", ylab = "clusters", main="model J",
ylim = range(partition_matrix)+c(-0.1,0.1), xaxt = "n", yaxt = "n")
axis(1, at = 1:Tm, labels = 1:Tm)
axis(2, at = unique(as.vector(partition_matrix)), las = 2)
abline(h = unique(as.vector(partition_matrix)), col = "lightgray", lty = "dotted")
abline(v = 1:Tm, col = "lightgray", lty = "dotted")
for (unit in 1:num_units) {
lines(1:Tm, partition_matrix[unit, ], type = "l", pch = 19,
col = unit, lwd = 1)
}
# legend("topright", legend = paste("Unit", 1:num_units), col = 1:num_units,
# lty = 1, lwd = 2, pch = 19, bty = "n")
####################################################################
partitions = partitions_drpmc
partition_matrix <- do.call(cbind, partitions)
par(mar=c(3.8,1,3,1),mfrow=c(1,2))
plot(NULL, NULL, xlim = c(1, Tm), ylim = c(1, num_units)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = "model C")
axis(1, at = 1:Tm, labels = 1:Tm)
for (t in 1:Tm) {
for (unit in 1:num_units) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 0.5)
}
}
partitions = partitions_drpmj
partition_matrix <- do.call(cbind, partitions)
plot(NULL, NULL, xlim = c(1, Tm), ylim = c(1, num_units)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = "model J")
axis(1, at = 1:Tm, labels = 1:Tm)
for (t in 1:Tm) {
for (unit in 1:num_units) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 0.5)
}
}
LEN = Tm
##########################
model_name = "model C"
partition = partitions_drpmc
##########################
df_cluster = data.frame(clusters=c(),Time=c())
for(time in 1:Tm){
salso_out <- partition[[time]]
df_temp = data.frame(
clusters = salso_out
)
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
n_clusters = unique(clusters_now)
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
library(mclust)
# build the ARI matrix
ARImats <- matrix(NA, nrow=LEN, ncol=LEN)
rho_ARI <- list()
for(k in 1:LEN){
rho_ARI[[k]] <- partition[[k]]
}
for(k in 1: LEN){
for(kk in 1: LEN){
ARImats[k,kk] <- adjustedRandIndex(rho_ARI[[k]], rho_ARI[[kk]])
}
}
ncols_ari = 100
# if (min(ARImats)<0){
# cols_ARI = colora(ncols_ari,79,0)
# brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# } else {
# cols_ARI = colora(ncols_ari,56,0)
# cols_ARI = rev(cols_ARI) # must be ordered from cold to warm
cols_ARI = rev(colora(ncols_ari,104,0)) # or 109
# cols_ARI = colora(ncols_ari,102,0)
# brks = seq(0,1,length.out=ncols_ari+1)
brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# }
# or see ?designer.colors for colors
library(fields)
image.plot(ARImats,
main=paste0("Lagged ARI values - ",model_name),axes=FALSE,col=cols_ARI,
breaks=brks)
mtext(text=c(paste("",1:LEN)), side=2, line=0.3,at=seq(0,1,length=LEN), las=1, cex=0.8)
mtext(text=c(paste("",1:LEN)), side=1, line=0.3,at=seq(0,1,length=LEN), las=2, cex=0.8)
##########################
model_name = "model J"
partition = partitions_drpmj
##########################
df_cluster = data.frame(clusters=c(),Time=c())
for(time in 1:Tm){
salso_out <- partition[[time]]
df_temp = data.frame(
clusters = salso_out
)
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
n_clusters = unique(clusters_now)
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
library(mclust)
# build the ARI matrix
ARImats <- matrix(NA, nrow=LEN, ncol=LEN)
rho_ARI <- list()
for(k in 1:LEN){
rho_ARI[[k]] <- partition[[k]]
}
for(k in 1: LEN){
for(kk in 1: LEN){
ARImats[k,kk] <- adjustedRandIndex(rho_ARI[[k]], rho_ARI[[kk]])
}
}
ncols_ari = 100
# if (min(ARImats)<0){
# cols_ARI = colora(ncols_ari,79,0)
# brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# } else {
# cols_ARI = colora(ncols_ari,56,0)
# cols_ARI = rev(cols_ARI) # must be ordered from cold to warm
cols_ARI = rev(colora(ncols_ari,104,0)) # or 109
# cols_ARI = colora(ncols_ari,102,0)
# brks = seq(0,1,length.out=ncols_ari+1)
brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# }
# or see ?designer.colors for colors
library(fields)
image.plot(ARImats,
main=paste0("Lagged ARI values - ",model_name),axes=FALSE,col=cols_ARI,
breaks=brks)
mtext(text=c(paste("",1:LEN)), side=2, line=0.3,at=seq(0,1,length=LEN), las=1, cex=0.8)
mtext(text=c(paste("",1:LEN)), side=1, line=0.3,at=seq(0,1,length=LEN), las=2, cex=0.8)
##########################################################
# take last sample (maybe not the best choice)
yredC=t(drpm1$fitted[,,size(drpm1$fitted)[3]])
yredJ=t(rout$fitted[,,size(rout$fitted)[3]])
yred=y
cols = colora(size(yred)[1],56,0)
# cols = colora(size(yred)[1],"div",show = 0)
par(mar=c(4,4,4,2))
for(i in 1:size(yredC)[1]){
if(i==1){
plot(1:size(yredC)[2],yredC[i,],col=cols[i],
ylim=extrema(yred,yredJ,yredC),
type='l',xlab='time',ylab="fitted values",main="model C")
}
else{
lines(1:size(yredC)[2],yredC[i,],col=cols[i])
}
}
par(mar=c(4,4,4,2))
for(i in 1:size(yredJ)[1]){
if(i==1){
plot(1:size(yredJ)[2],yredJ[i,],col=cols[i],
ylim=extrema(yred,yredJ,yredC),
type='l',xlab='time',ylab="fitted values",main="model J")
}
else{
lines(1:size(yredJ)[2],yredJ[i,],col=cols[i])
}
}
# original real data
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],type='l',
xlab='time',ylab='values',main="original data",
ylim=extrema(yred,yredJ,yredC))
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
##########################
model_name = "model C"
partition = partitions_drpmc
# model_name = "model J"
# partition = partitions_drpmj
##########################
df_cluster = data.frame(Longitude=c(),Latitude=c(),values=c(),clusters=c(),Time=c())
for(time in time_span){
salso_out <- partition[[time]]
df_temp = data.frame(
Longitude = sites$longitude,
Latitude = sites$latitude,
clusters = salso_out[1:105]
)
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
n_clusters = unique(clusters_now)
ycurrent = y[,paste0("w",time)]
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
clusters_old = NULL
for(time in time_span){
cat(crayon::red("Time",time,"\n"))
df_cluster_cut = df_cluster[df_cluster$Time==time,]
clusters_now = df_cluster_cut$clusters
####### no mode correct now
# clusters_now = mode_correct_clusters(clusters_old,clusters_now,very_verbose = 0)
# se fai heat plot non serve fare la mode correct
# perché la heat plot la usi per vedere anche i valori di pm10, non la coerenza temporale
# nei gruppi, che con la heat coloration si perde come visibilità (non so se è chiaro)
df_cluster_cut$clusters = clusters_now
# meglio l'idea 1
cols = color_correct_clusters(df_cluster_cut,idea=1,verbose=0)
# q = get_graph_plot(df_cluster_cut,cols)
# print(q)
p = plot_graph_and_hist(df_cluster_cut,cols,titolo = model_name)
cur_num = sprintf("%02d", time)
ggsave(file=paste0("../../tmp_images/",model_name,"-Graph and Boxplot-",cur_num,".png"),
plot=p, units="px",width=2500, height=1200, dpi=300)
# units="px",width=2500, height=1400, dpi=300)
dev.off()
clusters_old = clusters_now
}
##########################
# model_name = "model C"
# partition = partitions_drpmc
model_name = "model J"
partition = partitions_drpmj
##########################
df_cluster = data.frame(Longitude=c(),Latitude=c(),values=c(),clusters=c(),Time=c())
for(time in time_span){
salso_out <- partition[[time]]
df_temp = data.frame(
Longitude = sites$longitude,
Latitude = sites$latitude,
clusters = salso_out[1:105]
)
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
n_clusters = unique(clusters_now)
ycurrent = y[,paste0("w",time)]
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
clusters_old = NULL
for(time in time_span){
cat(crayon::red("Time",time,"\n"))
df_cluster_cut = df_cluster[df_cluster$Time==time,]
clusters_now = df_cluster_cut$clusters
####### no mode correct now
# clusters_now = mode_correct_clusters(clusters_old,clusters_now,very_verbose = 0)
# se fai heat plot non serve fare la mode correct
# perché la heat plot la usi per vedere anche i valori di pm10, non la coerenza temporale
# nei gruppi, che con la heat coloration si perde come visibilità (non so se è chiaro)
df_cluster_cut$clusters = clusters_now
# meglio l'idea 1
cols = color_correct_clusters(df_cluster_cut,idea=1,verbose=0)
# q = get_graph_plot(df_cluster_cut,cols)
# print(q)
p = plot_graph_and_hist(df_cluster_cut,cols,titolo = model_name)
cur_num = sprintf("%02d", time)
ggsave(file=paste0("../../tmp_images/",model_name,"-Graph and Boxplot-",cur_num,".png"),
plot=p, units="px",width=2500, height=1200, dpi=300)
# units="px",width=2500, height=1400, dpi=300)
dev.off()
clusters_old = clusters_now
}
# as.integer(runif(1,0,1000))*1.0
seed = 481.0
cat("seed",seed,"\n")
# niter=1000; nburn=500; nthin=2
# niter=50000; nburn=10000; nthin=40 # they did this in their tests
# niter=60000; nburn=20000; nthin=20
niter=80000; nburn=60000; nthin=20
nout <- (niter-nburn)/nthin
cat(nout,"valid iterations\n")
# params
m0_phi0 = 0
s20_phi0 = 1
A_ub_sigma = 5
A_ub_tau = 5
A_ub_lambda = 5
a_sigma  = 2; b_sigma  = 2
a_tau    = 2; b_tau    = 2
a_lambda = 2; b_lambda = 2
eta1_scale = 0.9
# mh is the of gaussian standard deviations for metropolis updates
# So these are not variances!
sig_mh_sig2 = 0.1
sig_mh_tau2 = 0.1
sig_mh_lambda2 = 0.1
sig_mh_eta1 = 0.1
sig_mh_phi1 = 0.1
update_eta1 = TRUE
update_phi1 = TRUE
a_alpha = 2; b_alpha = 2
time_specific_alpha = TRUE
# now space
spatial_cohesion = 3
mu0 = 0
k0 = 1
v0 = 5
L0 = 1
module_JDRPM <- juliaImport(juliaCall("include", module))
