}
for(k in 1: LEN){
for(kk in 1: LEN){
ARImats[k,kk] <- adjustedRandIndex(rho_ARI[[k]], rho_ARI[[kk]])
}
}
ncols_ari = 100
# if (min(ARImats)<0){
# cols_ARI = colora(ncols_ari,79,0)
# brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# } else {
# cols_ARI = colora(ncols_ari,56,0)
# cols_ARI = rev(cols_ARI) # must be ordered from cold to warm
cols_ARI = rev(colora(ncols_ari,104,0)) # or 109
# cols_ARI = colora(ncols_ari,102,0)
# brks = seq(0,1,length.out=ncols_ari+1)
brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# }
# or see ?designer.colors for colors
library(fields)
image.plot(ARImats,
main=paste0("Lagged ARI values - ",model_name),axes=FALSE,col=cols_ARI,
breaks=brks)
mtext(text=c(paste("",1:LEN)), side=2, line=0.3,at=seq(0,1,length=LEN), las=1, cex=0.8)
mtext(text=c(paste("",1:LEN)), side=1, line=0.3,at=seq(0,1,length=LEN), las=2, cex=0.8)
##########################################################
# take last sample (maybe not the best choice)
yredC=t(drpm1$fitted[,,size(drpm1$fitted)[3]])
yredJ=t(rout$fitted[,,size(rout$fitted)[3]])
yred=y
cols = colora(size(yred)[1],56,0)
# cols = colora(size(yred)[1],"div",show = 0)
par(mar=c(4,4,4,2))
for(i in 1:size(yredC)[1]){
if(i==1){
plot(1:size(yredC)[2],yredC[i,],col=cols[i],
ylim=extrema(yred,yredJ,yredC),
type='l',xlab='time',ylab="fitted values",main="model C")
}
else{
lines(1:size(yredC)[2],yredC[i,],col=cols[i])
}
}
par(mar=c(4,4,4,2))
for(i in 1:size(yredJ)[1]){
if(i==1){
plot(1:size(yredJ)[2],yredJ[i,],col=cols[i],
ylim=extrema(yred,yredJ,yredC),
type='l',xlab='time',ylab="fitted values",main="model J")
}
else{
lines(1:size(yredJ)[2],yredJ[i,],col=cols[i])
}
}
# original real data
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],type='l',
xlab='time',ylab='values',main="original data",
ylim=extrema(yred,yredJ,yredC))
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
##########################
# model_name = "model C"
# partition = partitions_drpmc
model_name = "model J"
partition = partitions_drpmj
##########################
par(mar=c(1,1,1,1))
for (time in 1:Tm){
salso_out = partition[[time]]
ssout = summary(salso_out)
# plot(ssout,type="heatmap")
# plot(ssout,type="mds")
plot(ssout,type="pairs",data=s_std)
text(0.3,0.91,pos=3,paste0(model_name," - Time ",time))
# plot(ssout,type="dendrogram")
# dev.off()
}
# preparation
source("plot functions/plotter.R")
source("include_clusters_functions.R")
sites = data.frame(
longitude = unique(df_weekly$Longitude),
latitude = unique(df_weekly$Latitude))
sites = data.frame(
longitude = unique(df_weekly$Longitude),
latitude = unique(df_weekly$Latitude))
std_sites = data.frame(
longitude = unique(df_wsc$Longitude),
latitude = unique(df_wsc$Latitude))
stations = unique(df_wsc$IDStations)
y=data.frame()
target = "AQ_pm10"
# target = "WE_tot_precipitation"
for(st in stations){
y_we_pm10=cbind(as.data.frame(st),t(df_wsc[which(df_wsc$IDStations==st),target]))
y=rbind(y,y_we_pm10)
}
rownames(y) = NULL
colnames(y)<- c("id",paste0("w", 1:53))
time_span = 1:10 # low time span for quick testing, real one will be 1:53
##########################
# model_name = "model C"
# partition = partitions_drpmc
model_name = "model J"
partition = partitions_drpmj
##########################
df_cluster = data.frame(Longitude=c(),Latitude=c(),values=c(),clusters=c(),Time=c())
for(time in time_span){
salso_out <- partition[[time]]
df_temp = data.frame(
Longitude = sites$longitude,
Latitude = sites$latitude,
clusters = salso_out[1:105]
)
idxs = which(is.na(df_temp$clusters))
# replace(df_temp$clusters, idxs, 3)
df_temp$clusters[idxs] = max(na.omit(df_temp$clusters))+1
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
n_clusters = unique(clusters_now)
ycurrent = y[,paste0("w",time)]
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
time_span
sites = data.frame(
longitude = unique(df_weekly$Longitude),
latitude = unique(df_weekly$Latitude))
sites = data.frame(
longitude = unique(df_weekly$Longitude),
latitude = unique(df_weekly$Latitude))
std_sites = data.frame(
longitude = unique(df_wsc$Longitude),
latitude = unique(df_wsc$Latitude))
stations = unique(df_wsc$IDStations)
y=data.frame()
target = "AQ_pm10"
# target = "WE_tot_precipitation"
for(st in stations){
y_we_pm10=cbind(as.data.frame(st),t(df_wsc[which(df_wsc$IDStations==st),target]))
y=rbind(y,y_we_pm10)
}
rownames(y) = NULL
colnames(y)<- c("id",paste0("w", 1:53))
time_span = 1:Tm # low time span for quick testing, real one will be 1:53
##########################
# model_name = "model C"
# partition = partitions_drpmc
model_name = "model J"
partition = partitions_drpmj
##########################
df_cluster = data.frame(Longitude=c(),Latitude=c(),values=c(),clusters=c(),Time=c())
for(time in time_span){
salso_out <- partition[[time]]
df_temp = data.frame(
Longitude = sites$longitude,
Latitude = sites$latitude,
clusters = salso_out[1:105]
)
idxs = which(is.na(df_temp$clusters))
# replace(df_temp$clusters, idxs, 3)
df_temp$clusters[idxs] = max(na.omit(df_temp$clusters))+1
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
n_clusters = unique(clusters_now)
ycurrent = y[,paste0("w",time)]
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
clusters_old = NULL
for(time in time_span){
cat(crayon::red("Time",time,"\n"))
df_cluster_cut = df_cluster[df_cluster$Time==time,]
clusters_now = df_cluster_cut$clusters
####### no mode correct now
# clusters_now = mode_correct_clusters(clusters_old,clusters_now,very_verbose = 0)
# se fai heat plot non serve fare la mode correct
# perché la heat plot la usi per vedere anche i valori di pm10, non la coerenza temporale
# nei gruppi, che con la heat coloration si perde come visibilità (non so se è chiaro)
df_cluster_cut$clusters = clusters_now
# meglio l'idea 1
cols = color_correct_clusters(df_cluster_cut,idea=1,verbose=0)
# q = get_graph_plot(df_cluster_cut,cols)
# print(q)
p = plot_graph_and_hist(df_cluster_cut,cols,titolo = model_name)
cur_num = sprintf("%02d", time)
ggsave(file=paste0("../../tmp_images/",model_name,"-Graph and Boxplot-",cur_num,".png"),
plot=p, units="px",width=2500, height=1200, dpi=300)
dev.off()
clusters_old = clusters_now
}
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J with X_cl",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1), mgp=c(1,1,0))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1), mgp=c(2,2,0))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1), mgp=c(3,3,0))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1),oma=c(2,2,2,2))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1),oma=c(2,2,1,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1),oma=c(2,2,1,0))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1),oma=c(2,4,1,0))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1),oma=c(2,1,1,0))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1),oma=c(2,0.2,1,0))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1),oma=c(2,0.1,1,0))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
?par
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1),mgp=c(3,1,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1),mgp=c(3,1,0))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1),mgp=c(3,1,0.4))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1),mgp=c(3,0.1,0))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
# png("../../tmp_images/Clusters and covariate relation - model J with X_cl.png",
# width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main="model J - considering Altitude when clustering",
xlab="units",ylab="Altitude")
# dev.off()
titleJ = "model J - considering Altitude when clustering"
png(paste0("../../tmp_images/",titleJ",.png"),
titleJ = "model J - considering Altitude when clustering"
png(paste0("../../tmp_images/",titleJ,".png"),
width = 600, height = 300,units = "px")
par(mar=c(4,4,2,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main=titleJ,
xlab="units",ylab="Altitude")
dev.off()
titleJ = "model J - considering Altitude when clustering"
png(paste0("../../tmp_images/",titleJ,".pdf"),
width = 400, height = 300,units = "px")
par(mar=c(4,4,2,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main=titleJ,
xlab="units",ylab="Altitude")
dev.off()
titleJ = "model J - considering Altitude when clustering"
pdf(paste0("../../tmp_images/",titleJ,".pdf"),
width = 400, height = 300,units = "px")
titleJ = "model J - considering Altitude when clustering"
pdf(paste0("../../tmp_images/",titleJ,".pdf"),
width = 400, height = 300)
par(mar=c(4,4,2,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main=titleJ,
xlab="units",ylab="Altitude")
dev.off()
titleJ = "model J - considering Altitude when clustering"
pdf(paste0("../../tmp_images/",titleJ,".pdf"),
width = 4, height = 3)
png(paste0("../../tmp_images/",titleJ,".png"),
width = 400, height = 300,units = "px")
par(mar=c(4,4,2,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main=titleJ,
xlab="units",ylab="Altitude")
dev.off()
titleJ = "model J - considering Altitude when clustering"
pdf(paste0("../../tmp_images/",titleJ,".pdf"),width = 4, height = 3)
# png(paste0("../../tmp_images/",titleJ,".png"), width = 400, height = 300,units = "px")
par(mar=c(4,4,2,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main=titleJ,
xlab="units",ylab="Altitude")
dev.off()
titleJ = "model J - considering Altitude when clustering"
pdf(paste0("../../tmp_images/",titleJ,".pdf"),width = 10, height = 7)
# png(paste0("../../tmp_images/",titleJ,".png"), width = 400, height = 300,units = "px")
par(mar=c(4,4,2,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main=titleJ,
xlab="units",ylab="Altitude")
dev.off()
titleJ = "model J - considering Altitude when clustering"
pdf(paste0("../../tmp_images/",titleJ,".pdf"),width = 8, height = 5)
# png(paste0("../../tmp_images/",titleJ,".png"), width = 400, height = 300,units = "px")
par(mar=c(4,4,2,1))
mean(X_cl[which(partition[[1]]==1),,1])
mean(X_cl[which(partition[[1]]==2),,1])
mean(X_cl[which(partition[[1]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[1]],
main=titleJ,
xlab="units",ylab="Altitude")
dev.off()
titleJ = "model J - considering Altitude when clustering"
pdf(paste0("../../tmp_images/",titleJ,".pdf"),width = 8, height = 5)
# png(paste0("../../tmp_images/",titleJ,".png"), width = 400, height = 300,units = "px")
par(mar=c(4,4,2,1))
time=1
mean(X_cl[which(partition[[time]]==1),,1])
mean(X_cl[which(partition[[time]]==2),,1])
mean(X_cl[which(partition[[time]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[time]],
main=paste0("time=",time,"|",titleJ),
xlab="units",ylab="Altitude")
dev.off()
titleJ = "model J - considering Altitude when clustering"
pdf(paste0("../../tmp_images/",titleJ,".pdf"),width = 8, height = 5)
# png(paste0("../../tmp_images/",titleJ,".png"), width = 400, height = 300,units = "px")
par(mar=c(4,4,2,1))
time=1
mean(X_cl[which(partition[[time]]==1),,1])
mean(X_cl[which(partition[[time]]==2),,1])
mean(X_cl[which(partition[[time]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[time]],
main=paste0("time=",time," - ",titleJ),
xlab="units",ylab="Altitude")
dev.off()
titleJ = "model J - considering Altitude when clustering"
# pdf(paste0("../../tmp_images/",titleJ,".pdf"),width = 8, height = 5)
png(paste0("../../tmp_images/",titleJ,".png"), width = 400, height = 300,units = "px")
par(mar=c(4,4,2,1))
time=1
mean(X_cl[which(partition[[time]]==1),,1])
mean(X_cl[which(partition[[time]]==2),,1])
mean(X_cl[which(partition[[time]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[time]],
main=paste0("time=",time," - ",titleJ),
xlab="units",ylab="Altitude")
dev.off()
titleJ = "model J - considering Altitude when clustering"
# pdf(paste0("../../tmp_images/",titleJ,".pdf"),width = 8, height = 5)
png(paste0("../../tmp_images/",titleJ,".png"), width = 500, height = 300,units = "px")
par(mar=c(4,4,2,1))
time=1
mean(X_cl[which(partition[[time]]==1),,1])
mean(X_cl[which(partition[[time]]==2),,1])
mean(X_cl[which(partition[[time]]==3),,1])
plot(X_cl[,,1],pch=19,col=partition[[time]],
main=paste0("time=",time," - ",titleJ),
xlab="units",ylab="Altitude")
dev.off()
module_JDRPM <- juliaImport(juliaCall("include", module))
