niter=50000; nburn=30000; nthin=20
# niter=80000; nburn=50000; nthin=30
nout <- (niter-nburn)/nthin
cat(nout,"valid iterations\n")
# params
m0_phi0 = 0
s20_phi0 = 1
A_ub_sigma = 5
A_ub_tau = 5
A_ub_lambda = 5
# a_sigma  = 2; b_sigma  = 2
# a_tau    = 2; b_tau    = 2
# a_lambda = 2; b_lambda = 2
# a_sigma  = 1.3; b_sigma  = 1.9
# a_tau    = 1.3; b_tau    = 1.9
# a_lambda = 1.3; b_lambda = 1.9
a_sigma  = 0.01; b_sigma  = 0.01
a_tau    = 0.1; b_tau    = 0.1
a_lambda = 0.1; b_lambda = 0.1
eta1_scale = 0.9
# mh is the of gaussian standard deviations for metropolis updates
# So these are not variances!
sig_mh_sig2 = 0.2
sig_mh_tau2 = 0.2
sig_mh_lambda2 = 0.2
sig_mh_eta1 = 0.1
sig_mh_phi1 = 0.1
update_eta1 = TRUE
update_phi1 = F
a_alpha = 2; b_alpha = 2
time_specific_alpha = TRUE
# now space
spatial_cohesion = 3
mu0 = 0
k0 = 1
v0 = 5
L0 = 1
module_JDRPM <- juliaImport(juliaCall("include", module))
out = module_JDRPM$MCMC_fit(
Y=as.matrix(y),
sp_coords = s_std,
M_dp = 1,
initial_partition = NA,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = time_specific_alpha,
update_alpha = TRUE,
include_eta1 = TRUE,
include_phi1 = F,
update_eta1 = update_eta1,
update_phi1 = update_phi1,
sig2h_priors = c(a_sigma,b_sigma),
eta1_priors = c(eta1_scale,sig_mh_eta1),
tau2_priors = c(a_tau,b_tau),
phi0_priors = c(m0_phi0,s20_phi0),
phi1_priors = sig_mh_phi1,
lambda2_priors = c(a_lambda,b_lambda),
alpha_priors = c(a_alpha,b_alpha),
######## space
spatial_cohesion_idx = spatial_cohesion,
sp_params = list(c(mu0,mu0),k0,v0,matrix(c(L0,0.0,0.0,L0),nrow=2)),
######## likelihood covariates
# Xlk_covariates = X_lk, beta_priors = c(rep(0,p),1),
Xlk_covariates = NA, beta_priors = NA,
######## clustering covariates
covariate_similarity_idx = 4,
cv_params = list(0,1,2,2),
Xcl_covariates = X_cl,
draws = niter, burnin = nburn, thin = nthin,
# draws = 5, burnin = 0, thin = 1,
logging = F,
seed = seed
)
rout = juliaGet(out)
names(rout)  = c("Si",
"gamma",
"alpha",
"sigma2h",
"muh",
"eta1",
"beta",
"theta",
"tau2",
"phi0",
"phi1",
"lambda2",
"fitted",
"llike",
"lpml",
"waic")
# reshape some stuff to uniform it to drpm output
rout$Si           = aperm(rout$Si,       c(2, 1, 3))
rout$gamma        = aperm(rout$gamma,    c(2, 1, 3))
rout$sigma2h      = aperm(rout$sigma2h,  c(2, 1, 3))
rout$muh          = aperm(rout$muh,      c(2, 1, 3))
rout$fitted       = aperm(rout$fitted,   c(2, 1, 3))
rout$llike        = aperm(rout$llike,    c(2, 1, 3))
rout$alpha        = aperm(rout$alpha,    c(2, 1))
rout$theta        = aperm(rout$theta,    c(2, 1))
rout$tau2         = aperm(rout$tau2,     c(2, 1))
rout$eta1         = aperm(rout$eta1,    c(2, 1))
rout$phi0     = matrix(rout$phi0,    ncol = 1)
rout$phi1     = matrix(rout$phi1,    ncol = 1)
rout$lambda2  = matrix(rout$lambda2, ncol = 1)
cat(crayon::red("\nLPML =",rout$lpml, "\nWAIC =",rout$waic))
partition = generate_partition(rout)
overlay_clusters(y,partition,"clusters J")
##########################
model_name = "model C"
partition = partitions_drpmc
maxNClusters = 3
# partition_plots = function(drpm1, rout){
# Initialize a list to store the partitions for each time instant
partitions_drpmc <- list()
partitions_drpmj <- list()
# Loop over each time instant to extract the consensus partition
for (t in 1:Tm) {
Sic_t <- drpm1$Si[t, , ]
Sic_t <- t(Sic_t)
partitions_drpmc[[t]] <- salso(Sic_t, loss = "binder"
, maxNClusters = maxNClusters
)
Sij_t <- rout$Si[t, , ]
Sij_t <- t(Sij_t)
partitions_drpmj[[t]] <- salso(Sij_t, loss = "binder"
, maxNClusters = maxNClusters
)
}
maxk = 0
cat(crayon::red("DRPM - C\n"))
for (t in 1:Tm){
cat("Time",t,"- #clusters =",length(unique(partitions_drpmc[[t]])),"\n")
maxk = max(length(unique(partitions_drpmc[[t]])),maxk)
}
cat("\n")
cat(crayon::red("DRPM - J\n"))
for (t in 1:Tm){
cat("Time",t,"- #clusters =",length(unique(partitions_drpmj[[t]])),"\n")
maxk = max(length(unique(partitions_drpmj[[t]])),maxk)
}
# cols=colora(len=maxk, seed=67, show=1)
# cols=colora(len=maxk, seed=41, show=0) # greens/light-blues
# cols=colora(len=maxk, seed=73, show=0) # dark blues
# cols=colora(len=maxk, seed=32, show=0) # viridis
# cols=colora(len=maxk, seed=22, show=0) # reds/blues
# cols=colora(len=maxk, seed=44, show=0) # greens
cols=colora(len=maxk, seed=56, show=0) # la 56
# cols = colora(len=10,"rand")
heatmap_matrix <- do.call(rbind, partitions_drpmc)
# Generate the heatmap
heatmap(heatmap_matrix, Rowv = NA, Colv = NA, scale = "none",
main="model C", xlab = "units", ylab = "time instants",
# col = terrain.colors(length(unique(as.vector(heatmap_matrix)))))
col = cols)
heatmap_matrix <- do.call(rbind, partitions_drpmj)
# Generate the heatmap
heatmap(heatmap_matrix, Rowv = NA, Colv = NA, scale = "none",
main="model J",xlab = "units", ylab = "time instants",
# col = terrain.colors(length(unique(as.vector(heatmap_matrix)))))
col = cols)
####################################################################
partitions = partitions_drpmc
partition_matrix <- do.call(cbind, partitions)
num_units <- nrow(partition_matrix)
Tm <- ncol(partition_matrix)
# Set up the plot
par(mar=c(4,4,2,2))
plot(1:Tm, rep(NA, Tm), type = "n",
xlab = "Time Instants", ylab = "clusters", main="model C",
ylim = range(partition_matrix)+c(-0.1,0.1), xaxt = "n", yaxt = "n")
axis(1, at = 1:Tm, labels = 1:Tm)
axis(2, at = unique(as.vector(partition_matrix)), las = 2)
# Add grid lines for clarity
abline(h = unique(as.vector(partition_matrix)), col = "lightgray", lty = "dotted")
abline(v = 1:Tm, col = "lightgray", lty = "dotted")
# Plot lines and points for each unit
for (unit in 1:num_units) {
lines(1:Tm, partition_matrix[unit, ], type = "l", pch = 19,
col = unit, lwd = 1)
}
# legend("topright", legend = paste("Unit", 1:num_units), col = 1:num_units,
# lty = 1, lwd = 2, pch = 19, bty = "n")
partitions = partitions_drpmj
partition_matrix <- do.call(cbind, partitions)
num_units <- nrow(partition_matrix)
Tm <- ncol(partition_matrix)
# Set up the plot
par(mar=c(4,4,2,2))
plot(1:Tm, rep(NA, Tm), type = "n",
xlab = "Time Instants", ylab = "clusters", main="model J",
ylim = range(partition_matrix)+c(-0.1,0.1), xaxt = "n", yaxt = "n")
axis(1, at = 1:Tm, labels = 1:Tm)
axis(2, at = unique(as.vector(partition_matrix)), las = 2)
abline(h = unique(as.vector(partition_matrix)), col = "lightgray", lty = "dotted")
abline(v = 1:Tm, col = "lightgray", lty = "dotted")
for (unit in 1:num_units) {
lines(1:Tm, partition_matrix[unit, ], type = "l", pch = 19,
col = unit, lwd = 1)
}
# legend("topright", legend = paste("Unit", 1:num_units), col = 1:num_units,
# lty = 1, lwd = 2, pch = 19, bty = "n")
####################################################################
partitions = partitions_drpmc
partition_matrix <- do.call(cbind, partitions)
par(mar=c(3.8,1,3,1),mfrow=c(1,2))
plot(NULL, NULL, xlim = c(1, Tm), ylim = c(1, num_units)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = "model C")
axis(1, at = 1:Tm, labels = 1:Tm)
for (t in 1:Tm) {
for (unit in 1:num_units) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 0.5)
}
}
partitions = partitions_drpmj
partition_matrix <- do.call(cbind, partitions)
plot(NULL, NULL, xlim = c(1, Tm), ylim = c(1, num_units)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = "model J")
axis(1, at = 1:Tm, labels = 1:Tm)
for (t in 1:Tm) {
for (unit in 1:num_units) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 0.5)
}
}
LEN = Tm
##########################
model_name = "model C"
partition = partitions_drpmc
##########################
df_cluster = data.frame(clusters=c(),Time=c())
for(time in 1:Tm){
salso_out <- partition[[time]]
df_temp = data.frame(
clusters = salso_out
)
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
n_clusters = unique(clusters_now)
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
library(mclust)
# build the ARI matrix
ARImats <- matrix(NA, nrow=LEN, ncol=LEN)
rho_ARI <- list()
for(k in 1:LEN){
rho_ARI[[k]] <- partition[[k]]
}
for(k in 1: LEN){
for(kk in 1: LEN){
ARImats[k,kk] <- adjustedRandIndex(rho_ARI[[k]], rho_ARI[[kk]])
}
}
ncols_ari = 100
# if (min(ARImats)<0){
# cols_ARI = colora(ncols_ari,79,0)
# brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# } else {
# cols_ARI = colora(ncols_ari,56,0)
# cols_ARI = rev(cols_ARI) # must be ordered from cold to warm
cols_ARI = rev(colora(ncols_ari,104,0)) # or 109
# cols_ARI = colora(ncols_ari,102,0)
# brks = seq(0,1,length.out=ncols_ari+1)
brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# }
# or see ?designer.colors for colors
library(fields)
image.plot(ARImats,
main=paste0("Lagged ARI values - ",model_name),axes=FALSE,col=cols_ARI,
breaks=brks)
mtext(text=c(paste("",1:LEN)), side=2, line=0.3,at=seq(0,1,length=LEN), las=1, cex=0.8)
mtext(text=c(paste("",1:LEN)), side=1, line=0.3,at=seq(0,1,length=LEN), las=2, cex=0.8)
##########################
model_name = "model J"
partition = partitions_drpmj
##########################
df_cluster = data.frame(clusters=c(),Time=c())
for(time in 1:Tm){
salso_out <- partition[[time]]
df_temp = data.frame(
clusters = salso_out
)
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
n_clusters = unique(clusters_now)
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
library(mclust)
# build the ARI matrix
ARImats <- matrix(NA, nrow=LEN, ncol=LEN)
rho_ARI <- list()
for(k in 1:LEN){
rho_ARI[[k]] <- partition[[k]]
}
for(k in 1: LEN){
for(kk in 1: LEN){
ARImats[k,kk] <- adjustedRandIndex(rho_ARI[[k]], rho_ARI[[kk]])
}
}
ncols_ari = 100
# if (min(ARImats)<0){
# cols_ARI = colora(ncols_ari,79,0)
# brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# } else {
# cols_ARI = colora(ncols_ari,56,0)
# cols_ARI = rev(cols_ARI) # must be ordered from cold to warm
cols_ARI = rev(colora(ncols_ari,104,0)) # or 109
# cols_ARI = colora(ncols_ari,102,0)
# brks = seq(0,1,length.out=ncols_ari+1)
brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# }
# or see ?designer.colors for colors
library(fields)
image.plot(ARImats,
main=paste0("Lagged ARI values - ",model_name),axes=FALSE,col=cols_ARI,
breaks=brks)
mtext(text=c(paste("",1:LEN)), side=2, line=0.3,at=seq(0,1,length=LEN), las=1, cex=0.8)
mtext(text=c(paste("",1:LEN)), side=1, line=0.3,at=seq(0,1,length=LEN), las=2, cex=0.8)
##########################################################
# take last sample (maybe not the best choice)
yredC=t(drpm1$fitted[,,size(drpm1$fitted)[3]])
yredJ=t(rout$fitted[,,size(rout$fitted)[3]])
yred=y
cols = colora(size(yred)[1],56,0)
# cols = colora(size(yred)[1],"div",show = 0)
par(mar=c(4,4,4,2))
for(i in 1:size(yredC)[1]){
if(i==1){
plot(1:size(yredC)[2],yredC[i,],col=cols[i],
ylim=extrema(yred,yredJ,yredC),
type='l',xlab='time',ylab="fitted values",main="model C")
}
else{
lines(1:size(yredC)[2],yredC[i,],col=cols[i])
}
}
par(mar=c(4,4,4,2))
for(i in 1:size(yredJ)[1]){
if(i==1){
plot(1:size(yredJ)[2],yredJ[i,],col=cols[i],
ylim=extrema(yred,yredJ,yredC),
type='l',xlab='time',ylab="fitted values",main="model J")
}
else{
lines(1:size(yredJ)[2],yredJ[i,],col=cols[i])
}
}
# original real data
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],type='l',
xlab='time',ylab='values',main="original data",
ylim=extrema(yred,yredJ,yredC))
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
##########################
model_name = "model C"
partition = partitions_drpmc
# model_name = "model J"
# partition = partitions_drpmj
##########################
par(mar=c(1,1,1,1))
for (time in 1:Tm){
salso_out = partition[[time]]
ssout = summary(salso_out)
# plot(ssout,type="heatmap")
# plot(ssout,type="mds")
plot(ssout,type="pairs",data=s_std)
text(0.3,0.91,pos=3,paste0(model_name," - Time ",time))
# plot(ssout,type="dendrogram")
# dev.off()
}
##########################
# model_name = "model C"
# partition = partitions_drpmc
model_name = "model J"
partition = partitions_drpmj
##########################
par(mar=c(1,1,1,1))
for (time in 1:Tm){
salso_out = partition[[time]]
ssout = summary(salso_out)
# plot(ssout,type="heatmap")
# plot(ssout,type="mds")
plot(ssout,type="pairs",data=s_std)
text(0.3,0.91,pos=3,paste0(model_name," - Time ",time))
# plot(ssout,type="dendrogram")
# dev.off()
}
size(drpm1$mu)
size(rout$muh)
unitj = 1
for (time in 1:Tm){
par(mfrow=c(1,2),mar=c(2,2,4,2))
plot(drpm1$mu[time,unitj,],type="l",
ylim=c(min(drpm1$mu[time,unitj,],rout$muh[time,unitj,]),
max(drpm1$mu[time,unitj,],rout$muh[time,unitj,])),
main=bquote("Model DRPM C\nTrace plot of mu at time "*.(time) * " unit " * .(unitj)),
xlab = "MCMC iterations",ylab="values")
plot(rout$muh[time,unitj,],type="l",
ylim=c(min(drpm1$mu[time,unitj,],rout$muh[time,unitj,]),
max(drpm1$mu[time,unitj,],rout$muh[time,unitj,])),
main=bquote("Model DRPM J\nTrace plot of mu at time "*.(time) * " unit " * .(unitj)),
xlab = "MCMC iterations",ylab="values")
}
size(drpm1$sig2)
size(rout$sigma2h)
unitj = 1
for (time in 1:Tm){
par(mfrow=c(1,2),mar=c(2,2,4,2))
plot(drpm1$sig2[time,unitj,],type="l",
main=bquote("Model DRPM C\nTrace plot of sigma2 at time "*.(time) * " unit " * .(unitj)),
ylim=c(0,max(drpm1$sig2[time,unitj,], rout$sigma2h[time,unitj,])),
xlab = "MCMC iterations",ylab="values")
plot(rout$sigma2h[time,unitj,],type="l",
main=bquote("Model DRPM J\nTrace plot of sigma2 at time "*.(time) * " unit " * .(unitj)),
ylim=c(0,max(drpm1$sig2[time,unitj,], rout$sigma2h[time,unitj,])),
xlab = "MCMC iterations",ylab="values")
}
dim(drpm1$eta1)
dim(rout$eta1)
cat("did we update eta1?", update_eta1)
for (unit in 1:N){
par(mfrow=c(1,2),mar=c(2,2,4,2))
plot(drpm1$eta1[,unit],type="l",
ylim=c(min(drpm1$eta1[,unit],rout$eta1[,unit]),
max(drpm1$eta1[,unit],rout$eta1[,unit])),
main=bquote("Model DRPM C\nTrace plot of eta1 at unit "*.(unit)),
xlab = "MCMC iterations",ylab="values")
plot(rout$eta1[,unit],type="l",
ylim=c(min(drpm1$eta1[,unit],rout$eta1[,unit]),
max(drpm1$eta1[,unit],rout$eta1[,unit])),
main=bquote("Model DRPM J\nTrace plot of eta1 at unit "*.(unit)),
xlab = "MCMC iterations",ylab="values")
}
for (time in 1:Tm){
par(mfrow=c(1,2),mar=c(2,2,4,2))
plot(drpm1$theta[,time],type="l",
ylim=c(min(drpm1$theta[,time],rout$theta[,time]),
max(drpm1$theta[,time],rout$theta[,time])),
main=bquote("Model DRPM C\nTrace plot of theta at time "*.(time)),
xlab = "MCMC iterations",ylab="values")
plot(rout$theta[,time],type="l",
ylim=c(min(drpm1$theta[,time],rout$theta[,time]),
max(drpm1$theta[,time],rout$theta[,time])),
main=bquote("Model DRPM J\nTrace plot of theta at time "*.(time)),
xlab = "MCMC iterations",ylab="values")
}
dim(drpm1$tau2)
dim(rout$tau2)
for (time in 1:Tm){
par(mfrow=c(1,2),mar=c(2,2,4,2))
plot(drpm1$tau2[,time],type="l",
ylim=c(0,max(drpm1$tau2[,time],rout$tau2[,time])),
main=bquote("Model DRPM C\nTrace plot of tau2 at time "*.(time)),
xlab = "MCMC iterations",ylab="values")
plot(rout$tau2[,time],type="l",
ylim=c(0,max(drpm1$tau2[,time],rout$tau2[,time])),
main=bquote("Model DRPM J\nTrace plot of tau2 at time "*.(time)),
xlab = "MCMC iterations",ylab="values")
}
# params
m0_phi0 = 0
s20_phi0 = 1
A_ub_sigma = 5
A_ub_tau = 5
A_ub_lambda = 5
# a_sigma  = 2; b_sigma  = 2
# a_tau    = 2; b_tau    = 2
# a_lambda = 2; b_lambda = 2
# a_sigma  = 1.3; b_sigma  = 1.9
# a_tau    = 1.3; b_tau    = 1.9
a_lambda = 1.3; b_lambda = 1.9
a_sigma  = 0.01; b_sigma  = 0.01
a_tau    = 0.1; b_tau    = 0.1
# a_lambda = 0.1; b_lambda = 0.1
eta1_scale = 0.9
# mh is the of gaussian standard deviations for metropolis updates
# So these are not variances!
sig_mh_sig2 = 0.2
sig_mh_tau2 = 0.2
sig_mh_lambda2 = 0.2
sig_mh_eta1 = 0.1
sig_mh_phi1 = 0.1
update_eta1 = TRUE
update_phi1 = F
a_alpha = 2; b_alpha = 2
time_specific_alpha = TRUE
# now space
spatial_cohesion = 3
mu0 = 0
k0 = 1
v0 = 5
L0 = 1
module_JDRPM <- juliaImport(juliaCall("include", module))
library(JuliaConnectoR)
juliaSetupOk()
# juliaEval("using Pkg")
# juliaEval("Pkg.activate(\"../../JDRPM\")")
# juliaEval("Pkg.instantiate()")
# juliaEval("Pkg.status()")
# setup project
juliaEval("using Pkg; Pkg.status()")
