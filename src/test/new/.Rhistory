cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
drpm1$lam2
cat("\nSi     size = ",size(drpm1$Si),"\n")
cat("gamma  size = ",size(drpm1$gamma),"\n")
cat("mu     size = ",size(drpm1$mu),"\n")
cat("sig2   size = ",size(drpm1$sig2),"\n")
cat("alpha  size = ",size(drpm1$alpha),"\n")
cat("theta  size = ",size(drpm1$theta),"\n")
cat("tau2   size = ",size(drpm1$tau2),"\n")
cat("eta1   size = ",size(drpm1$eta1),"\n")
cat("phi0   size = ",size(drpm1$phi0),"\n")
cat("phi1   size = ",size(drpm1$phi1),"\n")
cat("lam2   size = ",size(drpm1$lam2),"\n")
cat("llike  size = ",size(drpm1$llike),"\n")
cat("fitted size = ",size(drpm1$fitted),"\n")
rout$Si_out
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
rout$Si_out
t(rout$Si_out)
rout$Si_out
my_array <- array(1:100, dim = c(5, 3, 7))  # Example array
my_array
# Permute the dimensions
# aperm(my_array, c(2, 1, 3)) will swap the first and second dimensions
new_array <- aperm(my_array, c(2, 1, 3))
new_array
my_array
# Permute the dimensions
aperm(my_array, c(2, 1, 3)) will swap the first and second dimensions
# Permute the dimensions
aperm(my_array, c(2, 1, 3)) # will swap the first and second dimensions
my_array
# Permute the dimensions
aperm(my_array, c(2, 1, 3)) # will swap the first and second dimensions
# Now 'new_array' is of size 3 x 5 x 20
dim(new_array)
my_array <- array(1:100, dim = c(5, 3, 7))  # Example array
my_array
# Permute the dimensions
aperm(my_array, c(2, 1, 3)) # will swap the first and second dimensions
rout$Si_out
aperm(rout$Si_out, c(2, 1, 3))
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
my_array <- array(1:100, dim = c(5, 7))  # Example array
my_array
# Permute the dimensions
aperm(my_array, c(2, 1) # will swap the first and second dimensions
# Permute the dimensions
aperm(my_array, c(2, 1) # will swap the first and second dimensions
# Permute the dimensions
aperm(my_array, c(2, 1)) # will swap the first and second dimensions
my_array <- array(1:100, dim = c(5, 7))  # Example array
my_array
my_array <- array(1:100, dim = c(3, 7))  # Example array
my_array
rout$alpha_out
# Permute the dimensions
aperm(my_array, c(2, 1)) # will swap the first and second dimensions
rout$eta1_iter
transpose(rout$eta1_iter)
t(rout$eta1_iter)
size(t(rout$eta1_iter))
drpm1$phi0
rout$eta1_iter
cat("\nSi     size = ",size(drpm1$Si),"\n")
cat("gamma  size = ",size(drpm1$gamma),"\n")
cat("mu     size = ",size(drpm1$mu),"\n")
cat("sig2   size = ",size(drpm1$sig2),"\n")
cat("alpha  size = ",size(drpm1$alpha),"\n")
cat("theta  size = ",size(drpm1$theta),"\n")
cat("tau2   size = ",size(drpm1$tau2),"\n")
cat("eta1   size = ",size(drpm1$eta1),"\n")
cat("phi0   size = ",size(drpm1$phi0),"\n")
cat("phi1   size = ",size(drpm1$phi1),"\n")
cat("lam2   size = ",size(drpm1$lam2),"\n")
cat("llike  size = ",size(drpm1$llike),"\n")
cat("fitted size = ",size(drpm1$fitted),"\n")
eta1_iter_matrix <- matrix(rout$eta1_iter, ncol = 1)
eta1_iter_matrix
rout$eta1_iter
rout$Si_out      = aperm(rout$Si_out,      c(2, 1, 3))
rout$gamma_out   = aperm(rout$gamma_out,   c(2, 1, 3))
rout$sigma2h_out = aperm(rout$sigma2h_out, c(2, 1, 3))
rout$muh_out     = aperm(rout$muh_out,     c(2, 1, 3))
rout$alpha_out   = aperm(rout$alpha_out,   c(2, 1))
rout$theta_out   = aperm(rout$theta_out,   c(2, 1))
rout$tau2_out    = aperm(rout$tau2_out,    c(2, 1))
rout$eta1_iter   = matrix(rout$eta1_iter, ncol = 1)
rout$phi0_out    = matrix(rout$phi0_out,  ncol = 1)
rout$phi1_out    = matrix(rout$phi1_out,  ncol = 1)
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
rout = juliaGet(out)
names(rout)  = c("Si_out",
"gamma_out",
"alpha_out",
"sigma2h_out",
"muh_out",
"eta1_iter",
"beta_out",
"theta_out",
"tau2_out",
"phi0_out",
"phi1_out",
"lambda2_out")
rout$eta1_iter
TestModule1 <- juliaImport(juliaCall("include", testModule))
out = TestModule1$MCMC_fit(
Y=Y,
sp_coords = sp_coords,
Xlk_covariates = X_covariates,
# Xcl_covariates = ,
M_dp = 19,
# initial_partition = NA,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = TRUE,
update_alpha = TRUE,
include_eta1 = TRUE,
include_phi1 = TRUE,
update_eta1 = TRUE,
update_phi1 = TRUE,
sig2h_priors = c(3,1),
eta1_priors = c(1,2),
beta_priors = c(rep(1,p),2),
tau2_priors = c(1,2),
phi0_priors = c(1,2),
phi1_priors = 2,
lambda2_priors = c(1,2),
alpha_priors = c(1,1),
spatial_cohesion_idx = 1,
sp_params = 0.5,
# sp_params = c(0.5,1),
# spatial_cohesion_idx = 3,
# sp_params = list(c(1,2),1,2,matrix(c(1,2,2,4),nrow=2)),
# covariate_similarity_idx = NA,
draws = 78,
burnin = 60,
thin = 2,
verbose = TRUE,
seed = seed_choice
)
rout = juliaGet(out)
names(rout)  = c("Si_out",
"gamma_out",
"alpha_out",
"sigma2h_out",
"muh_out",
"eta1_iter",
"beta_out",
"theta_out",
"tau2_out",
"phi0_out",
"phi1_out",
"lambda2_out")
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
rout$Si_out      = aperm(rout$Si_out,      c(2, 1, 3))
rout$gamma_out   = aperm(rout$gamma_out,   c(2, 1, 3))
rout$sigma2h_out = aperm(rout$sigma2h_out, c(2, 1, 3))
rout$muh_out     = aperm(rout$muh_out,     c(2, 1, 3))
rout$alpha_out   = aperm(rout$alpha_out,   c(2, 1))
rout$theta_out   = aperm(rout$theta_out,   c(2, 1))
rout$tau2_out    = aperm(rout$tau2_out,    c(2, 1))
rout$eta1_iter   = matrix(rout$eta1_iter, ncol = 1)
rout$phi0_out    = matrix(rout$phi0_out,  ncol = 1)
rout$phi1_out    = matrix(rout$phi1_out,  ncol = 1)
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
rout$eta1_iter
rout = juliaGet(out)
names(rout)  = c("Si_out",
"gamma_out",
"alpha_out",
"sigma2h_out",
"muh_out",
"eta1_iter",
"beta_out",
"theta_out",
"tau2_out",
"phi0_out",
"phi1_out",
"lambda2_out")
rout$eta1_iter
rout$Si_out      = aperm(rout$Si_out,      c(2, 1, 3))
rout$gamma_out   = aperm(rout$gamma_out,   c(2, 1, 3))
rout$sigma2h_out = aperm(rout$sigma2h_out, c(2, 1, 3))
rout$muh_out     = aperm(rout$muh_out,     c(2, 1, 3))
rout$alpha_out   = aperm(rout$alpha_out,   c(2, 1))
rout$theta_out   = aperm(rout$theta_out,   c(2, 1))
rout$tau2_out    = aperm(rout$tau2_out,    c(2, 1))
rout$eta1_iter   = aperm(rout$eta1_iter,   c(2, 1))
rout$phi0_out    = matrix(rout$phi0_out,  ncol = 1)
rout$phi1_out    = matrix(rout$phi1_out,  ncol = 1)
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
rout$Si_out       = aperm(rout$Si_out,      c(2, 1, 3))
rout$gamma_out    = aperm(rout$gamma_out,   c(2, 1, 3))
rout$sigma2h_out  = aperm(rout$sigma2h_out, c(2, 1, 3))
rout$muh_out      = aperm(rout$muh_out,     c(2, 1, 3))
rout$alpha_out    = aperm(rout$alpha_out,   c(2, 1))
rout$theta_out    = aperm(rout$theta_out,   c(2, 1))
rout$tau2_out     = aperm(rout$tau2_out,    c(2, 1))
rout$eta1_iter    = aperm(rout$eta1_iter,   c(2, 1))
rout$phi0_out     = matrix(rout$phi0_out,    ncol = 1)
rout$phi1_out     = matrix(rout$phi1_out,    ncol = 1)
rout$lambda2_out  = matrix(rout$lambda2_out, ncol = 1)
rout = juliaGet(out)
names(rout)  = c("Si_out",
"gamma_out",
"alpha_out",
"sigma2h_out",
"muh_out",
"eta1_iter",
"beta_out",
"theta_out",
"tau2_out",
"phi0_out",
"phi1_out",
"lambda2_out")
rout$Si_out       = aperm(rout$Si_out,      c(2, 1, 3))
rout$gamma_out    = aperm(rout$gamma_out,   c(2, 1, 3))
rout$sigma2h_out  = aperm(rout$sigma2h_out, c(2, 1, 3))
rout$muh_out      = aperm(rout$muh_out,     c(2, 1, 3))
rout$alpha_out    = aperm(rout$alpha_out,   c(2, 1))
rout$theta_out    = aperm(rout$theta_out,   c(2, 1))
rout$tau2_out     = aperm(rout$tau2_out,    c(2, 1))
rout$eta1_iter    = aperm(rout$eta1_iter,   c(2, 1))
rout$phi0_out     = matrix(rout$phi0_out,    ncol = 1)
rout$phi1_out     = matrix(rout$phi1_out,    ncol = 1)
rout$lambda2_out  = matrix(rout$lambda2_out, ncol = 1)
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
rout$lambda2_out
drpm1$lam2
cat("\nSi     size = ",size(drpm1$Si),"\n")
cat("gamma  size = ",size(drpm1$gamma),"\n")
cat("mu     size = ",size(drpm1$mu),"\n")
cat("sig2   size = ",size(drpm1$sig2),"\n")
cat("alpha  size = ",size(drpm1$alpha),"\n")
cat("theta  size = ",size(drpm1$theta),"\n")
cat("tau2   size = ",size(drpm1$tau2),"\n")
cat("eta1   size = ",size(drpm1$eta1),"\n")
cat("phi0   size = ",size(drpm1$phi0),"\n")
cat("phi1   size = ",size(drpm1$phi1),"\n")
cat("lam2   size = ",size(drpm1$lam2),"\n")
cat("llike  size = ",size(drpm1$llike),"\n")
cat("fitted size = ",size(drpm1$fitted),"\n")
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
rout = juliaGet(out)
names(rout)  = c("Si_out",
"gamma_out",
"alpha_out",
"sigma2h_out",
"muh_out",
"eta1_iter",
"beta_out",
"theta_out",
"tau2_out",
"phi0_out",
"phi1_out",
"lambda2_out")
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
rout$beta_out
rout$Si_out       = aperm(rout$Si_out,      c(2, 1, 3))
rout$gamma_out    = aperm(rout$gamma_out,   c(2, 1, 3))
rout$sigma2h_out  = aperm(rout$sigma2h_out, c(2, 1, 3))
rout$muh_out      = aperm(rout$muh_out,     c(2, 1, 3))
rout$alpha_out    = aperm(rout$alpha_out,   c(2, 1))
rout$theta_out    = aperm(rout$theta_out,   c(2, 1))
rout$tau2_out     = aperm(rout$tau2_out,    c(2, 1))
rout$eta1_iter    = aperm(rout$eta1_iter,   c(2, 1))
rout$phi0_out     = matrix(rout$phi0_out,    ncol = 1)
rout$phi1_out     = matrix(rout$phi1_out,    ncol = 1)
rout$lambda2_out  = matrix(rout$lambda2_out, ncol = 1)
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
drpm1$llike
drpm1$waic
drpm1$lpml
TestModule1 <- juliaImport(juliaCall("include", testModule))
out = TestModule1$MCMC_fit(
Y=Y,
sp_coords = sp_coords,
Xlk_covariates = X_covariates,
# Xcl_covariates = ,
M_dp = 19,
# initial_partition = NA,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = TRUE,
update_alpha = TRUE,
include_eta1 = TRUE,
include_phi1 = TRUE,
update_eta1 = TRUE,
update_phi1 = TRUE,
sig2h_priors = c(3,1),
eta1_priors = c(1,2),
beta_priors = c(rep(1,p),2),
tau2_priors = c(1,2),
phi0_priors = c(1,2),
phi1_priors = 2,
lambda2_priors = c(1,2),
alpha_priors = c(1,1),
spatial_cohesion_idx = 1,
sp_params = 0.5,
# sp_params = c(0.5,1),
# spatial_cohesion_idx = 3,
# sp_params = list(c(1,2),1,2,matrix(c(1,2,2,4),nrow=2)),
# covariate_similarity_idx = NA,
draws = 78,
burnin = 60,
thin = 2,
verbose = TRUE,
seed = seed_choice
)
cat("\nSi     size = ",size(drpm1$Si),"\n")
cat("gamma  size = ",size(drpm1$gamma),"\n")
cat("mu     size = ",size(drpm1$mu),"\n")
cat("sig2   size = ",size(drpm1$sig2),"\n")
cat("alpha  size = ",size(drpm1$alpha),"\n")
cat("theta  size = ",size(drpm1$theta),"\n")
cat("tau2   size = ",size(drpm1$tau2),"\n")
cat("eta1   size = ",size(drpm1$eta1),"\n")
cat("phi0   size = ",size(drpm1$phi0),"\n")
cat("phi1   size = ",size(drpm1$phi1),"\n")
cat("lam2   size = ",size(drpm1$lam2),"\n")
cat("llike  size = ",size(drpm1$llike),"\n")
cat("fitted size = ",size(drpm1$fitted),"\n")
rout = juliaGet(out)
names(rout)  = c("Si_out",
"gamma_out",
"alpha_out",
"sigma2h_out",
"muh_out",
"eta1_iter",
"beta_out",
"theta_out",
"tau2_out",
"phi0_out",
"phi1_out",
"lambda2_out",
"fitted",
"llike",
"lpml",
"waic")
# reshape some stuff to uniform it to drpm output
rout$Si_out       = aperm(rout$Si_out,       c(2, 1, 3))
rout$gamma_out    = aperm(rout$gamma_out,    c(2, 1, 3))
rout$sigma2h_out  = aperm(rout$sigma2h_out,  c(2, 1, 3))
rout$muh_out      = aperm(rout$muh_out,      c(2, 1, 3))
rout$alpha_out    = aperm(rout$alpha_out,    c(2, 1))
rout$theta_out    = aperm(rout$theta_out,    c(2, 1))
rout$tau2_out     = aperm(rout$tau2_out,     c(2, 1))
rout$eta1_iter    = aperm(rout$eta1_iter,    c(2, 1))
rout$phi0_out     = matrix(rout$phi0_out,    ncol = 1)
rout$phi1_out     = matrix(rout$phi1_out,    ncol = 1)
rout$lambda2_out  = matrix(rout$lambda2_out, ncol = 1)
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
cat("Si_out       size = ",size(rout$Si_out),"\n")
cat("gamma_out    size = ",size(rout$gamma_out),"\n")
cat("sigma2h_out  size = ",size(rout$sigma2h_out),"\n")
cat("muh_out      size = ",size(rout$muh_out),"\n")
cat("alpha_out    size = ",size(rout$alpha_out),"\n")
cat("theta_out    size = ",size(rout$theta_out),"\n")
cat("tau2_out     size = ",size(rout$tau2_out),"\n")
cat("eta1_iter    size = ",size(rout$eta1_iter),"\n")
cat("phi0_out     size = ",size(rout$phi0_out),"\n")
cat("phi1_out     size = ",size(rout$phi1_out),"\n")
cat("lambda2_out  size = ",size(rout$lambda2_out),"\n")
cat("beta_out     size = ",size(rout$beta_out),"\n")
cat("fitted       size = ",size(rout$fitted),"\n")
cat("llike        size = ",size(rout$llike),"\n")
