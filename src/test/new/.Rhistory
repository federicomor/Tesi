TestModule1$test1()
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include"
testModule <- system.file("examples", "TestModule1.jl",package = "JuliaConnectoR")
testModule
testModule <- system.file("JDRPM","src","JDRPM.jl",package = "JuliaConnectoR")
testModule
getwd()
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include"
testModule <- system.file("examples", "TestModule1.jl",package = "JuliaConnectoR")
testModule
testModule <- system.file("C:/Users/feder/AppData/Local/R/win-library/4.3/JuliaConnectoR/examples/TestModule1.jl",package = "JuliaConnectoR")
testModule
testModule
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include"
testModule <- system.file("examples", "TestModule1.jl",package = "JuliaConnectoR")
testModule
juliaCall("include", "C:/Users/feder/AppData/Local/R/win-library/4.3/JuliaConnectoR/examples/TestModule1.jl")
juliaFun("test1")
juliaFun("test1",1)
juliaFun("test1")
TestModule1$test1()
TestModule1
writeLines(readLines(testModule))
juliaFun(test1)
juliaFun(test1())
juliaFun("test1")
juliaFun("test1",0)
juliaFun("test1",)
juliaFun("test1")
# Importing a module without a package
testModule <- system.file("examples", "TestModule1.jl",
package = "JuliaConnectoR")
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".TestModule1")
TestModule1$test1()
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
TestModule1$test1()
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
TestModule1$test1()
# Importing a module without a package
testModule <- system.file("examples", "TestModule1.jl",
package = "JuliaConnectoR")
cat(testModule)
# Importing a module without a package
testModule <- system.file("C:","Users","feder","AppData","Local","R","win-library","4.3","JuliaConnectoR","examples","TestModule1.jl",package = "JuliaConnectoR")
testModule
# Importing a module without a package
testModule <- system.file("C","Users","feder","AppData","Local","R","win-library","4.3","JuliaConnectoR","examples","TestModule1.jl",package = "JuliaConnectoR")
testModule
# Importing a module without a package
setwd(".")
getwd()
testModule <- system.file("JDRPM.jl",package = "JuliaConnectoR")
cat(testModule)
testModule <- system.file("JDRPM.jl",package = "JuliaConnectoR")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
TestModule1$test1()
# Importing a module without a package
getwd()
testModule <- system.file("JDRPM.jl",package = "JuliaConnectoR")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# Importing a module without a package
getwd()
testModule <- system.file("examples", "JDRPM",package = "JuliaConnectoR")
cat(testModule)
# Importing a module without a package
testModule <- system.file("examples", "TestModule1.jl",package = "JuliaConnectoR")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".TestModule1")
TestModule1$test1()
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
TestModule1$test1()
# Importing a module without a package
getwd()
testModule <- system.file("examples", "JDRPM",package = "JuliaConnectoR")
# Importing a module without a package
getwd()
testModule <- system.file("examples", "JDRPM",package = "JuliaConnectoR")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
testModule <- system.file("examples", "JDRPM.jl",package = "JuliaConnectoR")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".TestModule1")
TestModule1$my_example(10)
# Importing a module without a package
getwd()
testModule <- system.file("examples", "JDRPM.jl",package = "JuliaConnectoR")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".TestModule1")
TestModule1$my_example(10)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
TestModule1$my_example(10)
# Importing a module without a package
getwd()
testModule <- system.file("examples", "JDRPM.jl",package = "JuliaConnectoR")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
TestModule1$my_example(10)
# Importing a module without a package
getwd()
testModule <- system.file("examples", "JDRPM.jl",package = "JuliaConnectoR")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
TestModule1$my_example(10)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
# TestModule1 <- juliaImport(juliaCall("include", testModule))
# TestModule1$test1()
TestModule1$my_example(10)
TestModule1$my_example(100)
# Importing a module without a package
getwd()
testModule <- system.file("examples", "JDRPM.jl",package = "JuliaConnectoR")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
TestModule1$my_example(100)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
# TestModule1 <- juliaImport(juliaCall("include", testModule))
# TestModule1$test1()
TestModule1$my_example(30)
x = TestModule1$my_example(30)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
# TestModule1 <- juliaImport(juliaCall("include", testModule))
# TestModule1$test1()
x
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
# TestModule1 <- juliaImport(juliaCall("include", testModule))
# TestModule1$test1()
x
x = TestModule1$my_example(30)
x
system.file()
# Importing a module without a package
getwd()
testModule <- system.file("examples", "JDRPM.jl",package = "JuliaConnectoR")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
x = TestModule1$my_example(30)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
x
# Importing a module without a package
getwd()
testModule = "../../JDRPM/src/JDRPM.jl"
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# Importing a module without a package
getwd()
testModule = "../../JDRPM/src/JDRPM.jl"
cat(testModule)
file_path_as_absolute(testModule)
normalizePath(testModule)
# Importing a module without a package
getwd()
testModule = normalizePath("../../JDRPM/src/JDRPM.jl")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
x = TestModule1$my_example(30)
# Importing a module without a package
getwd()
testModule = normalizePath("../../JDRPM/src/JDRPM.jl")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
x = TestModule1$my_example(30)
# Importing a module without a package
getwd()
testModule = normalizePath("../../JDRPM/src/JDRPM.jl")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
x = TestModule1$my_example(30)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
x
x = TestModule1$my_example(30)
x = TestModule1$my_example(30)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
x
juliaFun("my_example",10)
juliaFun("TestModule1$my_example",10)
juliaFun("TestModule1$my_example",10)
# Importing a module without a package
getwd()
testModule = normalizePath("../../JDRPM/src/JDRPM.jl")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
x = TestModule1$my_example(30)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
x
# Importing a module without a package
getwd()
testModule = normalizePath("../../JDRPM/src/JDRPM.jl")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
x = TestModule1$my_example(30)
typeof(30)
?integer
# Importing a module without a package
getwd()
testModule = normalizePath("../../JDRPM/src/JDRPM.jl")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
x = TestModule1$my_example(30)
# Functions using non-ASCII characters
greekModule <- system.file("examples", "GreekModule.jl",
package = "JuliaConnectoR")
suppressWarnings({ # importing gives a warning on non-UTF-8 locales
GreekModule <- juliaImport(juliaCall("include", greekModule))
})
# take a look at the file
cat(readLines(greekModule, encoding = "UTF-8"), sep = "\n")
# suppressWarnings({ # importing gives a warning on non-UTF-8 locales
GreekModule <- juliaImport(juliaCall("include", greekModule))
GreekModule <- juliaImport(juliaCall("include", greekModule))
suppressWarnings({ # importing gives a warning on non-UTF-8 locales
GreekModule <- juliaImport(juliaCall("include", greekModule))
})
# take a look at the file
cat(readLines(greekModule, encoding = "UTF-8"), sep = "\n")
# use alternative names
GreekModule$`<sigma>`(1)
# use alternative names
GreekModule$`<sigma>`(1)
GreekModule$`log<sigma>`(1)
# take a look at the file
cat(readLines(greekModule, encoding = "UTF-8"), sep = "\n")
GreekModule$\sigma(1)
GreekModule$sigma(1)
# Importing a module without a package
getwd()
testModule = normalizePath("../../JDRPM/src/JDRPM.jl")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
x = TestModule1$my_example(30)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
x
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
x
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
# Importing a module without a package
getwd()
testModule = normalizePath("../../JDRPM/src/JDRPM.jl")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# import in R via relative module path
TestModule1 <- juliaImport(".JDRPM")
x = TestModule1$my_example(30)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
x
y = TestModule1$MCMC_fit(randn(100, 50),rand(100, 2),randn(100, 3, 50))
?as.matrix
n = 100
T = 20
n = 100
T = 20
T
if(T)
end+
P;
n = 100
T = 20
p = 3
# nxT matrix of normally distributed random numbers
y <- matrix(rnorm(n * T), nrow = n, ncol = T)
y
n = 10
T = 15
p = 3
# nxT matrix of normally distributed random numbers
y <- matrix(rnorm(n * T), nrow = n, ncol = T)
y
# nx3xT array of normally distributed random numbers
X_covariates <- array(rnorm(n * p * T), dim = c(n, p, T))
X_covariates
sp_coords
# nx2 matrix of uniformly distributed random numbers between 0 and 1
sp_coords <- matrix(runif(n * 2), nrow = n, ncol = 2)
sp_coords
n = 10
T = 15
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
n = 10
T = 15
p = 3
# nxT matrix of normally distributed random numbers
y <- matrix(rnorm(n * T), nrow = n, ncol = T)
# nx3xT array of normally distributed random numbers
X_covariates <- array(rnorm(n * p * T), dim = c(n, p, T))
# nx2 matrix of uniformly distributed random numbers between 0 and 1
sp_coords <- matrix(runif(n * 2), nrow = n, ncol = 2)
y = TestModule1$MCMC_fit(Y,sp_coords,X_covariates)
# nxT matrix of normally distributed random numbers
Y <- matrix(rnorm(n * T), nrow = n, ncol = T)
# nx3xT array of normally distributed random numbers
X_covariates <- array(rnorm(n * p * T), dim = c(n, p, T))
# nx2 matrix of uniformly distributed random numbers between 0 and 1
sp_coords <- matrix(runif(n * 2), nrow = n, ncol = 2)
TestModule1$MCMC_fit(Y,sp_coords,X_covariates)
# Importing a module without a package
getwd()
testModule = normalizePath("../../JDRPM/src/JDRPM.jl")
cat(testModule)
# take a look at the file
writeLines(readLines(testModule))
# load in Julia
juliaCall("include", testModule)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
x = TestModule1$my_example(30)
x
n = 10
T = 15
p = 3
# nxT matrix of normally distributed random numbers
Y <- matrix(rnorm(n * T), nrow = n, ncol = T)
# nx3xT array of normally distributed random numbers
X_covariates <- array(rnorm(n * p * T), dim = c(n, p, T))
# nx2 matrix of uniformly distributed random numbers between 0 and 1
sp_coords <- matrix(runif(n * 2), nrow = n, ncol = 2)
TestModule1$MCMC_fit(Y,sp_coords,X_covariates)
TestModule1$MCMC_fit(Y,sp_coords,NaN)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
TestModule1$MCMC_fit(Y,sp_coords,NaN)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
TestModule1$MCMC_fit(Y,sp_coords,NaN)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
TestModule1$MCMC_fit(Y,sp_coords,NaN)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
TestModule1$MCMC_fit(Y,sp_coords,NaN)
# Importing a module without a package
getwd()
testModule = normalizePath("../../JDRPM/src/JDRPM.jl")
cat(testModule)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
x
n = 10
T = 15
p = 3
# nxT matrix of normally distributed random numbers
Y <- matrix(rnorm(n * T), nrow = n, ncol = T)
# nx3xT array of normally distributed random numbers
X_covariates <- array(rnorm(n * p * T), dim = c(n, p, T))
# nx2 matrix of uniformly distributed random numbers between 0 and 1
sp_coords <- matrix(runif(n * 2), nrow = n, ncol = 2)
TestModule1$MCMC_fit(Y,sp_coords,NaN)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
TestModule1$MCMC_fit(Y,sp_coords,NaN)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
TestModule1$MCMC_fit(Y,sp_coords,NaN)
TestModule1$MCMC_fit(Y,sp_coords,X_covariates)
TestModule1$MCMC_fit(Y,sp_coords)
TestModule1$MCMC_fit(Y,sp_coords,NaN)
TestModule1$MCMC_fit(Y,sp_coords,NA)
?NA
?NaN
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
TestModule1$MCMC_fit(Y,sp_coords,NA)
# Importing a local module is also possible in one line,
# by directly using the module object returned by "include".
TestModule1 <- juliaImport(juliaCall("include", testModule))
x = TestModule1$my_example(30)
x = TestModule1$my_example(30)
x
TestModule1$MCMC_fit(Y,sp_coords,NA)
TestModule1$MCMC_fit(Y,sp_coords,X_covariates)
T
