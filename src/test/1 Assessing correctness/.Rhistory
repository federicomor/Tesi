plot_partition_with_numbers(partitions_drpmc, title="model C")
plot_partition_with_numbers(partitions_drpmj, title="model J")
if (save_plots==T){ dev.off()}
if (save_plots==T){
pdf(file="ari.pdf",width=10,height = 5)
}
par(mar=c(2,2,3,2),mfrow=c(1,2),oma=c(0.5,0.5,0.5,2))
plot_ARI(partitions_drpmc, title="model C")
plot_ARI(partitions_drpmj, title="model J")
if (save_plots==T){ dev.off()}
letters
# partition_plots = function(drpm1, rout){
# Initialize a list to store the partitions for each time instant
partitions_drpmc <- generate_partition(drpm1,maxncl = 0)
partitions_drpmj <- generate_partition(rout,maxncl = 0)
save_plots=F
# partition_matrix <- do.call(cbind, partitions)
# if (save_plots==T){
# 	pdf(file="partizioni_chars.pdf",width=10,height = 5)
# }
# par(mar=c(4,1,3,1),mfrow=c(1,2),oma=c(1,0.5,0.5,0.5))
# plot_partition_with_chars(partitions_drpmc, title="model C")
# plot_partition_with_chars(partitions_drpmj, title="model J")
# if (save_plots==T){ dev.off()}
if (save_plots==T){
pdf(file="partizioni_nums.pdf",width=10,height = 5)
}
par(mar=c(4,1,3,1),mfrow=c(1,2),oma=c(1,0.5,0.5,0.5))
plot_partition_with_numbers(partitions_drpmc, title="model C")
plot_partition_with_numbers(partitions_drpmj, title="model J")
if (save_plots==T){ dev.off()}
if (save_plots==T){
pdf(file="ari.pdf",width=10,height = 5)
}
par(mar=c(2,2,3,2),mfrow=c(1,2),oma=c(0.5,0.5,0.5,2))
plot_ARI(partitions_drpmc, title="model C")
plot_ARI(partitions_drpmj, title="model J")
if (save_plots==T){ dev.off()}
yredC=t(drpm1$fitted[,,size(drpm1$fitted)[3]])
yredJ=t(rout$fitted[,,size(rout$fitted)[3]])
yredORIG=y
save_plots=F
if (save_plots==TRUE) {
pdf(file="C_mean_prediction.pdf",height = 6,width=10)
# pdf(file="C_median_prediction.pdf",height = 6,width=10)
# pdf(file="C_last_iteration.pdf",height = 6,width=10)
}
##### take the median/mean/mode
summary_fitted = t(drpm1$fitted[,,size(rout$fitted)[3]])*0
for(j in 1:N){
for(t in 1:Tm){
values_j = c()
for (it in 1:size(drpm1$fitted)[3]){
values_j = c(values_j,drpm1$fitted[t,j,it])
}
summary_fitted[j,t] = mean(values_j)
# summary_fitted[j,t] = median(values_j)
# summary_fitted[j,t] = Mode(values_j) # function from include.R
}
}
yred=summary_fitted
# take last sample (maybe not the best choice)
# yred=t(drpm1$fitted[,,size(drpm1$fitted)[3]])
par(mar=c(2,2,2,1))
# cols = colora(size(yred)[1],56,0)
# cols = colora(N,"div",0)
# cols = colora(N,"div",seed_div = "Paired",show = 0)
cols = colora(N,56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
ylim=extrema(yredJ,yredC,yredORIG),type='l',xlab='',ylab="",
# main="C fitted values - last iteration")
main="C fitted values - iterations mean")
# main="C fitted values - iterations median")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
if (save_plots==TRUE) { dev.off()}
#################################################################
if (save_plots==TRUE) {
pdf(file="J_mean_prediction.pdf",height = 6,width=10)
# pdf(file="J_median_prediction.pdf",height = 6,width=10)
# pdf(file="J_last_iteration.pdf",height = 6,width=10)
}
summary_fitted = t(rout$fitted[,,size(rout$fitted)[3]])*0
for(j in 1:N){
for(t in 1:Tm){
values_j = c()
for (it in 1:size(rout$fitted)[3]){
values_j = c(values_j,rout$fitted[t,j,it])
}
summary_fitted[j,t] = mean(values_j)
# summary_fitted[j,t] = median(values_j)
# summary_fitted[j,t] = Mode(values_j) # function from include.R
}
}
yred=summary_fitted
# take last sample (maybe not the best choice)
# yred=t(rout$fitted[,,size(rout$fitted)[3]])
par(mar=c(2,2,2,1))
# cols = colora(size(yred)[1],56,0)
# cols = colora(N,"div",0)
cols = colora(N,56,0)
# cols = colora(N,"div",seed_div = "Paired",show = 0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
ylim=extrema(yredJ,yredC,yredORIG),type='l',xlab='',ylab="",
# main="J fitted values - last iteration")
main="J fitted values - iterations mean")
# main="J fitted values - iterations median")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
if (save_plots==TRUE) { dev.off() }
#################################################################
yred=y
# cols = colora(N,"div",0)
cols = colora(N,56,0)
# cols = colora(N,"div",seed_div = "Paired",show = 0)
if (save_plots==TRUE) {
pdf(file="test_1_generated_data.pdf",height = 6,width=10)
}
par(mar=c(2,2,2,1))
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],ylim=extrema(yredJ,yredC,yredORIG),type='l',
xlab='time',
main='Generated values')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# pchs
# offsets = c(-0.1,-0.2,0,0,0,0.2,0,0,0.1,0.3)
# for(i in 1:N){
# 	text(12.1,yred[i,12]+offsets[i],label=pchs[i],col=cols[i],cex=0.8)
# }
# offsets = c(-0.2,-0.4,0.1,0.7,0.82,-0.8,0,0,0.2,0.1)
# for(i in 1:N){
# 	text(0.92,yred[i,1]+offsets[i],label=pchs[i],col=cols[i],cex=0.8)
# }
legend("bottom", legend = paste("unit", 1:size(yred)[1]), col = cols,
lty = 1,lwd=2,
cex=0.8, bty="n",
ncol=5)
if (save_plots==TRUE) { dev.off()}
yredC=t(drpm1$fitted[,,size(drpm1$fitted)[3]])
yredJ=t(rout$fitted[,,size(rout$fitted)[3]])
yredORIG=y
save_plots=F
if (save_plots==TRUE) {
pdf(file="C_mean_prediction.pdf",height = 6,width=10)
# pdf(file="C_median_prediction.pdf",height = 6,width=10)
# pdf(file="C_last_iteration.pdf",height = 6,width=10)
}
##### take the median/mean/mode
summary_fitted = t(drpm1$fitted[,,size(rout$fitted)[3]])*0
for(j in 1:N){
for(t in 1:Tm){
values_j = c()
for (it in 1:size(drpm1$fitted)[3]){
values_j = c(values_j,drpm1$fitted[t,j,it])
}
summary_fitted[j,t] = mean(values_j)
# summary_fitted[j,t] = median(values_j)
# summary_fitted[j,t] = Mode(values_j) # function from include.R
}
}
yred=summary_fitted
# take last sample (maybe not the best choice)
# yred=t(drpm1$fitted[,,size(drpm1$fitted)[3]])
par(mar=c(2,2,2,1))
# cols = colora(size(yred)[1],56,0)
# cols = colora(N,"div",0)
# cols = colora(N,"div",seed_div = "Paired",show = 0)
cols = colora(N,56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
ylim=extrema(yredJ,yredC,yredORIG),type='l',xlab='',ylab="",
# main="C fitted values - last iteration")
main="C fitted values - iterations mean")
# main="C fitted values - iterations median")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
if (save_plots==TRUE) { dev.off()}
#################################################################
if (save_plots==TRUE) {
pdf(file="J_mean_prediction.pdf",height = 6,width=10)
# pdf(file="J_median_prediction.pdf",height = 6,width=10)
# pdf(file="J_last_iteration.pdf",height = 6,width=10)
}
summary_fitted = t(rout$fitted[,,size(rout$fitted)[3]])*0
for(j in 1:N){
for(t in 1:Tm){
values_j = c()
for (it in 1:size(rout$fitted)[3]){
values_j = c(values_j,rout$fitted[t,j,it])
}
summary_fitted[j,t] = mean(values_j)
# summary_fitted[j,t] = median(values_j)
# summary_fitted[j,t] = Mode(values_j) # function from include.R
}
}
yred=summary_fitted
# take last sample (maybe not the best choice)
# yred=t(rout$fitted[,,size(rout$fitted)[3]])
par(mar=c(2,2,2,1))
# cols = colora(size(yred)[1],56,0)
# cols = colora(N,"div",0)
cols = colora(N,56,0)
# cols = colora(N,"div",seed_div = "Paired",show = 0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
ylim=extrema(yredJ,yredC,yredORIG),type='l',xlab='',ylab="",
# main="J fitted values - last iteration")
main="J fitted values - iterations mean")
# main="J fitted values - iterations median")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
if (save_plots==TRUE) { dev.off() }
#################################################################
yred=y
# cols = colora(N,"div",0)
cols = colora(N,56,0)
# cols = colora(N,"div",seed_div = "Paired",show = 0)
if (save_plots==TRUE) {
pdf(file="test_1_generated_data.pdf",height = 6,width=10)
}
par(mar=c(2,2,2,1))
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],ylim=extrema(yredJ,yredC,yredORIG),type='l',
xlab='time',
main='Generated values')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# pchs
# offsets = c(-0.1,-0.2,0,0,0,0.2,0,0,0.1,0.3)
# for(i in 1:N){
# 	text(12.1,yred[i,12]+offsets[i],label=pchs[i],col=cols[i],cex=0.8)
# }
# offsets = c(-0.2,-0.4,0.1,0.7,0.82,-0.8,0,0,0.2,0.1)
# for(i in 1:N){
# 	text(0.92,yred[i,1]+offsets[i],label=pchs[i],col=cols[i],cex=0.8)
# }
# legend("bottom", legend = paste("unit", 1:size(yred)[1]), col = cols,
# 	   lty = 1,lwd=2,
# 	   cex=0.8, bty="n",
# 	   ncol=5)
if (save_plots==TRUE) { dev.off()}
yred=y
# cols = colora(N,"div",0)
cols = colora(N,56,0)
# cols = colora(N,"div",seed_div = "Paired",show = 0)
cexs = 0.8
save_plots=F
if (save_plots==TRUE) {
pdf(file="clusters_C.pdf",height = 6,width=10)
}
par(mar=c(2,2,2,1))
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],ylim=extrema(yredJ,yredC,yredORIG),type='l',
xlab='time',
main='Clusters according to model C-DRPM')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
partition = partitions_drpmc
# partition = partitions_drpmj
partition_matrix <- do.call(cbind, partition)
for(i in 1:N){
for (t in 1:Tm){
points(t,yred[i,t],col=partition_matrix[i, t],pch=19,cex=cexs)
}
}
if (save_plots==TRUE) { dev.off() }
# yred=y
# cols = colora(N,"div",0)
if (save_plots==TRUE) {
pdf(file="clusters_J.pdf",height = 6,width=10)
}
par(mar=c(2,2,2,1))
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],ylim=extrema(yredJ,yredC,yredORIG),type='l',
xlab='time',
main='Clusters according to model J-DRPM')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# partition = partitions_drpmc
partition = partitions_drpmj
partition_matrix <- do.call(cbind, partition)
for(i in 1:N){
for (t in 1:Tm){
points(t,yred[i,t],col=partition_matrix[i, t],
pch=19,cex=cexs)
}
}
if (save_plots==TRUE) { dev.off() }
MSE_matrices = function(m1,m2){
MSE = 0
for (i in 1:size(m1)[1]){
for (t in 1:size(m1)[2]){
MSE = MSE + (m1[i,t]-m2[i,t])^2
}
}
MSE = MSE/(size(m1)[1]*size(m1)[2])
return(MSE)
}
##### take the median/mean/mode
summary_fitted = t(drpm1$fitted[,,size(rout$fitted)[3]])*0
for(j in 1:N){
for(t in 1:Tm){
values_j = c()
for (it in 1:size(drpm1$fitted)[3]){
values_j = c(values_j,drpm1$fitted[t,j,it])
}
summary_fitted[j,t] = mean(values_j)
# summary_fitted[j,t] = median(values_j)
# summary_fitted[j,t] = Mode(values_j) # function from include.R
}
}
yredC=summary_fitted
# take last sample (maybe not the best choice)
# yredC=t(drpm1$fitted[,,size(drpm1$fitted)[3]])
#################################################################
summary_fitted = t(rout$fitted[,,size(rout$fitted)[3]])*0
for(j in 1:N){
for(t in 1:Tm){
values_j = c()
for (it in 1:size(rout$fitted)[3]){
values_j = c(values_j,rout$fitted[t,j,it])
}
summary_fitted[j,t] = mean(values_j)
# summary_fitted[j,t] = median(values_j)
# summary_fitted[j,t] = Mode(values_j) # function from include.R
}
}
yredJ=summary_fitted
# take last sample (maybe not the best choice)
# yredJ=t(rout$fitted[,,size(rout$fitted)[3]])
#################################################################
yredORIGI=y
#################################################################
MSE_matrices(yredC,yredORIGI)
# MSE_matrices(yredC,yredJ)
MSE_matrices(yredJ,yredORIGI)
load("../thesis data/df_wsc.Rdata")
na_summary(df_wsc)
sites = std_sites = data.frame(
longitude = unique(df_wsc$Longitude),
latitude = unique(df_wsc$Latitude))
stations = unique(df_wsc$IDStations)
yfull=data.frame()
target = "AQ_pm10"
# target = "WE_tot_precipitation"
for(st in stations){
y_we_pm10=cbind(as.data.frame(st),t(df_wsc[which(df_wsc$IDStations==st),target]))
yfull=rbind(yfull,y_we_pm10)
}
rownames(yfull) = NULL
colnames(yfull)<- c("id",paste0("w", 1:53))
time_span = 1:10 # low time span for quick testing, real one will be 1:53
set.seed(2)
# set.seed(2345)
### alcuni a caso:
# quanti = 20; nsubjects = sample(1:105, quanti,replace = F)
### alcuni:
# nsubjects = 1:10
### tutti:
nsubjects = 1:105
y = yfull[nsubjects,1+time_span]
#############################################
# authors suggested to/did scale the spatial locations and also centered the observations
mn <- apply(y,2,mean)
sd <- apply(y,2,sd)
y <- t(t(y) - mn)
Tm = tps <- ncol(y) # time span
N = size(y)[1] # number of units
num_units = N
sites = sites[nsubjects,]
smn <- apply(sites,2,mean)
ssd <- apply(sites,2,sd)
s_std <- t((t(sites) - smn)/ssd)
########################################
yred=y[,time_span]
par(mar=c(4,4,2,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],ylim=extrema(yred),type='l',xlab='weeks',ylab='pm10')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# -> we have
y
s_std
plot(s_std)
rownames(s_std) = NULL
# as.integer(runif(1,0,1000))*1.0
# seed = 881.0
seed = 314.0
cat("seed",seed,"\n")
# niter=1000; nburn=500; nthin=2
# niter=50000; nburn=10000; nthin=40 # they did this in their tests
# niter=30000; nburn=20000; nthin=10
# niter=50000; nburn=30000; nthin=20
# niter=80000; nburn=50000; nthin=30
niter=100000; nburn=60000; nthin=40
nout <- (niter-nburn)/nthin
cat(nout,"valid iterations\n")
# as.integer(runif(1,0,1000))*1.0
# seed = 881.0
seed = 314.0
cat("seed",seed,"\n")
# niter=1000; nburn=500; nthin=2
# niter=50000; nburn=10000; nthin=40 # they did this in their tests
# niter=30000; nburn=20000; nthin=10
# niter=50000; nburn=30000; nthin=20
# niter=80000; nburn=50000; nthin=30
niter=100000; nburn=70000; nthin=30
nout <- (niter-nburn)/nthin
cat(nout,"valid iterations\n")
# as.integer(runif(1,0,1000))*1.0
# seed = 881.0
seed = 314.0
cat("seed",seed,"\n")
# niter=1000; nburn=500; nthin=2
# niter=50000; nburn=10000; nthin=40 # they did this in their tests
# niter=30000; nburn=20000; nthin=10
# niter=50000; nburn=30000; nthin=20
# niter=80000; nburn=50000; nthin=30
niter=100000; nburn=60000; nthin=40
nout <- (niter-nburn)/nthin
cat(nout,"valid iterations\n")
# params
m0_phi0 = 0
s20_phi0 = 10
A_ub_sigma = 5
A_ub_tau = 5
A_ub_lambda = 5
a_sigma  = 1; b_sigma  = 2
a_tau    = 1; b_tau    = 2
a_lambda = 1; b_lambda = 2
eta1_scale = 0.9
# mh is the of gaussian standard deviations for metropolis updates
# So these are not variances!
sig_mh_sig2 = 0.3
sig_mh_tau2 = 0.3
sig_mh_lambda2 = 0.3
sig_mh_eta1 = 0.1
sig_mh_phi1 = 0.1
update_eta1 = TRUE
update_phi1 = TRUE
a_alpha = 2; b_alpha = 2
time_specific_alpha = TRUE
# now space
spatial_cohesion = 3
mu0 = 0
k0 = 1
v0 = 5
L0 = 1
tempo_inizio <- Sys.time()
drpm1 <- drpm_fit(
y=y,
s_coords = s_std,
M=1,
initial_partition = NULL,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = time_specific_alpha,
alpha_0=FALSE,
eta1_0=!(update_eta1),
phi1_0=!(update_phi1),
# modelPriors=c(0,100^2,1,1,1,1), # original default one
modelPriors=c(m0_phi0,s20_phi0,A_ub_sigma,A_ub_tau,A_ub_lambda,eta1_scale),
alphaPriors=rbind(c(a_alpha,b_alpha)), # if time_specific_alpha == TRUE
simpleModel = 0,
theta_tau2 = c(0, 2), # only used if simpleModel=1
SpatialCohesion=spatial_cohesion, # auxiliary similarity
# SpatialCohesion=4, # double dipper similarity
cParms=c(mu0, k0, v0, L0),
mh=c(sig_mh_sig2,sig_mh_tau2,sig_mh_lambda2,sig_mh_eta1,sig_mh_phi1),
verbose=TRUE,
# draws=1000,burn=0,thin=1)
draws=niter,burn=nburn,thin=nthin)
