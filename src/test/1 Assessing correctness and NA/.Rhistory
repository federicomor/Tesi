longitude = unique(df_wsc$Longitude),
latitude = unique(df_wsc$Latitude))
stations = unique(df_wsc$IDStations)
yfull=data.frame()
target = "AQ_pm10"
# target = "WE_tot_precipitation"
for(st in stations){
y_we_pm10=cbind(as.data.frame(st),t(df_wsc[which(df_wsc$IDStations==st),target]))
yfull=rbind(yfull,y_we_pm10)
}
rownames(yfull) = NULL
colnames(yfull)<- c("id",paste0("w", 1:(size(yfull)[2]-1)))
# time_span = 1:14 # GOOD
time_span = 1:4
# time_span = 1:12
set.seed(111)
# quanti = 80; nsubjects = sample(1:105, quanti,replace = F)
quanti = 30; nsubjects = sample(1:105, quanti,replace = F) #GOOD
# nsubjects = 1:105
y = yfull[nsubjects,1+time_span]
#############################################
# authors suggested to/did scale the spatial locations and also centered the observations
mn <- apply(y,2,mean)
sd <- apply(y,2,sd)
y <- t(t(y) - mn)
Tm = tps <- ncol(y) # time span
N = size(y)[1] # number of units
num_units = N
sites = sites_full[nsubjects,]
smn <- apply(sites,2,mean)
ssd <- apply(sites,2,sd)
s_std <- t((t(sites) - smn)/ssd)
# check
# mean(s_std[,1])
# mean(s_std[,2])
# var(s_std[,2])
# var(s_std[,1])
######################################
# yred=(y[,time_span]+0.5)*2
yred=y
par(mar=c(2,2,2,1))
# par(mar=c(4,4,2,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
# ylim=extrema(as.matrix(yred[,-c(1)])),
ylim=extrema(as.matrix(yred)),
type='l',xlab='weeks',ylab='pm10')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# for(i in 1:N){
# 	text(1,yred[i,1],i,cex=0.7)
# }
# -> we have
# y = yred
y
s_std
plot(s_std)
rownames(s_std) = NULL
sites_full = data.frame(
longitude = unique(df_wsc$Longitude),
latitude = unique(df_wsc$Latitude))
stations = unique(df_wsc$IDStations)
yfull=data.frame()
target = "AQ_pm10"
# target = "WE_tot_precipitation"
for(st in stations){
y_we_pm10=cbind(as.data.frame(st),t(df_wsc[which(df_wsc$IDStations==st),target]))
yfull=rbind(yfull,y_we_pm10)
}
rownames(yfull) = NULL
colnames(yfull)<- c("id",paste0("w", 1:(size(yfull)[2]-1)))
# time_span = 1:14 # GOOD
time_span = 1:4
# time_span = 1:12
set.seed(111)
# quanti = 80; nsubjects = sample(1:105, quanti,replace = F)
# quanti = 30; nsubjects = sample(1:105, quanti,replace = F) #GOOD
quanti = 60; nsubjects = sample(1:105, quanti,replace = F)
# nsubjects = 1:105
y = yfull[nsubjects,1+time_span]
#############################################
# authors suggested to/did scale the spatial locations and also centered the observations
mn <- apply(y,2,mean)
sd <- apply(y,2,sd)
y <- t(t(y) - mn)
Tm = tps <- ncol(y) # time span
N = size(y)[1] # number of units
num_units = N
sites = sites_full[nsubjects,]
smn <- apply(sites,2,mean)
ssd <- apply(sites,2,sd)
s_std <- t((t(sites) - smn)/ssd)
# check
# mean(s_std[,1])
# mean(s_std[,2])
# var(s_std[,2])
# var(s_std[,1])
######################################
# yred=(y[,time_span]+0.5)*2
yred=y
par(mar=c(2,2,2,1))
# par(mar=c(4,4,2,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
# ylim=extrema(as.matrix(yred[,-c(1)])),
ylim=extrema(as.matrix(yred)),
type='l',xlab='weeks',ylab='pm10')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# for(i in 1:N){
# 	text(1,yred[i,1],i,cex=0.7)
# }
# -> we have
# y = yred
y
s_std
plot(s_std)
rownames(s_std) = NULL
sites_full = data.frame(
longitude = unique(df_wsc$Longitude),
latitude = unique(df_wsc$Latitude))
stations = unique(df_wsc$IDStations)
yfull=data.frame()
target = "AQ_pm10"
# target = "WE_tot_precipitation"
for(st in stations){
y_we_pm10=cbind(as.data.frame(st),t(df_wsc[which(df_wsc$IDStations==st),target]))
yfull=rbind(yfull,y_we_pm10)
}
rownames(yfull) = NULL
colnames(yfull)<- c("id",paste0("w", 1:(size(yfull)[2]-1)))
# time_span = 1:14 # GOOD
time_span = 1:4
# time_span = 1:12
set.seed(114)
# quanti = 80; nsubjects = sample(1:105, quanti,replace = F)
# quanti = 30; nsubjects = sample(1:105, quanti,replace = F) #GOOD
quanti = 60; nsubjects = sample(1:105, quanti,replace = F)
# nsubjects = 1:105
y = yfull[nsubjects,1+time_span]
#############################################
# authors suggested to/did scale the spatial locations and also centered the observations
mn <- apply(y,2,mean)
sd <- apply(y,2,sd)
y <- t(t(y) - mn)
Tm = tps <- ncol(y) # time span
N = size(y)[1] # number of units
num_units = N
sites = sites_full[nsubjects,]
smn <- apply(sites,2,mean)
ssd <- apply(sites,2,sd)
s_std <- t((t(sites) - smn)/ssd)
# check
# mean(s_std[,1])
# mean(s_std[,2])
# var(s_std[,2])
# var(s_std[,1])
######################################
# yred=(y[,time_span]+0.5)*2
yred=y
par(mar=c(2,2,2,1))
# par(mar=c(4,4,2,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
# ylim=extrema(as.matrix(yred[,-c(1)])),
ylim=extrema(as.matrix(yred)),
type='l',xlab='weeks',ylab='pm10')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# for(i in 1:N){
# 	text(1,yred[i,1],i,cex=0.7)
# }
# -> we have
# y = yred
y
s_std
plot(s_std)
rownames(s_std) = NULL
sites_full = data.frame(
longitude = unique(df_wsc$Longitude),
latitude = unique(df_wsc$Latitude))
stations = unique(df_wsc$IDStations)
yfull=data.frame()
target = "AQ_pm10"
# target = "WE_tot_precipitation"
for(st in stations){
y_we_pm10=cbind(as.data.frame(st),t(df_wsc[which(df_wsc$IDStations==st),target]))
yfull=rbind(yfull,y_we_pm10)
}
rownames(yfull) = NULL
colnames(yfull)<- c("id",paste0("w", 1:(size(yfull)[2]-1)))
# time_span = 1:14 # GOOD
time_span = 1:4
# time_span = 1:12
set.seed(115)
# quanti = 80; nsubjects = sample(1:105, quanti,replace = F)
# quanti = 30; nsubjects = sample(1:105, quanti,replace = F) #GOOD
quanti = 60; nsubjects = sample(1:105, quanti,replace = F)
# nsubjects = 1:105
y = yfull[nsubjects,1+time_span]
#############################################
# authors suggested to/did scale the spatial locations and also centered the observations
mn <- apply(y,2,mean)
sd <- apply(y,2,sd)
y <- t(t(y) - mn)
Tm = tps <- ncol(y) # time span
N = size(y)[1] # number of units
num_units = N
sites = sites_full[nsubjects,]
smn <- apply(sites,2,mean)
ssd <- apply(sites,2,sd)
s_std <- t((t(sites) - smn)/ssd)
# check
# mean(s_std[,1])
# mean(s_std[,2])
# var(s_std[,2])
# var(s_std[,1])
######################################
# yred=(y[,time_span]+0.5)*2
yred=y
par(mar=c(2,2,2,1))
# par(mar=c(4,4,2,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
# ylim=extrema(as.matrix(yred[,-c(1)])),
ylim=extrema(as.matrix(yred)),
type='l',xlab='weeks',ylab='pm10')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# for(i in 1:N){
# 	text(1,yred[i,1],i,cex=0.7)
# }
# -> we have
# y = yred
y
s_std
plot(s_std)
rownames(s_std) = NULL
sites_full = data.frame(
longitude = unique(df_wsc$Longitude),
latitude = unique(df_wsc$Latitude))
stations = unique(df_wsc$IDStations)
yfull=data.frame()
target = "AQ_pm10"
# target = "WE_tot_precipitation"
for(st in stations){
y_we_pm10=cbind(as.data.frame(st),t(df_wsc[which(df_wsc$IDStations==st),target]))
yfull=rbind(yfull,y_we_pm10)
}
rownames(yfull) = NULL
colnames(yfull)<- c("id",paste0("w", 1:(size(yfull)[2]-1)))
# time_span = 1:14 # GOOD
time_span = 1:4
# time_span = 1:12
set.seed(111)
# quanti = 80; nsubjects = sample(1:105, quanti,replace = F)
# quanti = 30; nsubjects = sample(1:105, quanti,replace = F) #GOOD
quanti = 70; nsubjects = sample(1:105, quanti,replace = F)
# nsubjects = 1:105
y = yfull[nsubjects,1+time_span]
#############################################
# authors suggested to/did scale the spatial locations and also centered the observations
mn <- apply(y,2,mean)
sd <- apply(y,2,sd)
y <- t(t(y) - mn)
Tm = tps <- ncol(y) # time span
N = size(y)[1] # number of units
num_units = N
sites = sites_full[nsubjects,]
smn <- apply(sites,2,mean)
ssd <- apply(sites,2,sd)
s_std <- t((t(sites) - smn)/ssd)
# check
# mean(s_std[,1])
# mean(s_std[,2])
# var(s_std[,2])
# var(s_std[,1])
######################################
# yred=(y[,time_span]+0.5)*2
yred=y
par(mar=c(2,2,2,1))
# par(mar=c(4,4,2,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
# ylim=extrema(as.matrix(yred[,-c(1)])),
ylim=extrema(as.matrix(yred)),
type='l',xlab='weeks',ylab='pm10')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# for(i in 1:N){
# 	text(1,yred[i,1],i,cex=0.7)
# }
# -> we have
# y = yred
y
s_std
plot(s_std)
rownames(s_std) = NULL
# as.integer(runif(1,0,1000))*1.0
# seed = 881.0
seed = 314.0
cat("seed",seed,"\n")
# niter=10000; nburn=6000; nthin=4
# niter=50000; nburn=10000; nthin=40 # they did this in their tests
# niter=10000; nburn=0; nthin=1
# niter=20000; nburn=15000; nthin=5
niter=50000; nburn=30000; nthin=20 # GOOD
# niter=80000; nburn=60000; nthin=20
# niter=120000; nburn=60000; nthin=30
# niter=100000; nburn=60000; nthin=40
# niter=100; nburn=0; nthin=1
nout <- (niter-nburn)/nthin
cat(nout,"valid iterations\n")
niter = as.integer(niter)
nburn = as.integer(nburn)
nthin = as.integer(nthin)
# params
m0_phi0 = 0
s20_phi0 = 10
A_ub_sigma = 10
A_ub_tau = 5
A_ub_lambda = 5
# a_sigma  = 3; b_sigma  = 4
# a_tau    = 3; b_tau    = 4
# a_lambda = 3; b_lambda = 4
# a_sigma  = 2; b_sigma  = 2
# a_tau    = 2; b_tau    = 2
# a_lambda = 2; b_lambda = 2
a_sigma  = 0.01; b_sigma  = 0.01
a_lambda = 0.1; b_lambda = 0.1
# # a_tau    = 0.1; b_tau    = 0.1
a_tau    = 2; b_tau    = 2
# a_tau    = 1; b_tau    = 1.5
# a_sigma  = 5; b_sigma  = 8
# a_tau    = 5; b_tau    = 8
# a_lambda = 5; b_lambda = 8
eta1_scale = 0.9
# mh is the of gaussian standard deviations for metropolis updates
# So these are not variances!
sig_mh_sig2 = 0.2
sig_mh_tau2 = 0.2
sig_mh_lambda2 = 0.2
sig_mh_eta1 = 0.1
sig_mh_phi1 = 0.1
update_eta1 = TRUE
update_phi1 = F
a_alpha = 2; b_alpha = 2
time_specific_alpha = TRUE
# now space
spatial_cohesion = 3
mu0 = 0
k0 = 1
v0 = 5
L0 = 1
# params
m0_phi0 = 0
s20_phi0 = 10
A_ub_sigma = 7
A_ub_tau = 5
A_ub_lambda = 5
# a_sigma  = 3; b_sigma  = 4
# a_tau    = 3; b_tau    = 4
# a_lambda = 3; b_lambda = 4
# a_sigma  = 2; b_sigma  = 2
# a_tau    = 2; b_tau    = 2
# a_lambda = 2; b_lambda = 2
a_sigma  = 0.01; b_sigma  = 0.01
a_lambda = 0.1; b_lambda = 0.1
# # a_tau    = 0.1; b_tau    = 0.1
a_tau    = 2; b_tau    = 2
# a_tau    = 1; b_tau    = 1.5
# a_sigma  = 5; b_sigma  = 8
# a_tau    = 5; b_tau    = 8
# a_lambda = 5; b_lambda = 8
eta1_scale = 0.9
# mh is the of gaussian standard deviations for metropolis updates
# So these are not variances!
sig_mh_sig2 = 0.2
sig_mh_tau2 = 0.2
sig_mh_lambda2 = 0.2
sig_mh_eta1 = 0.1
sig_mh_phi1 = 0.1
update_eta1 = TRUE
update_phi1 = F
a_alpha = 2; b_alpha = 2
time_specific_alpha = TRUE
# now space
spatial_cohesion = 3
mu0 = 0
k0 = 1
v0 = 5
L0 = 1
# params
m0_phi0 = 0
s20_phi0 = 8
A_ub_sigma = 7
A_ub_tau = 5
A_ub_lambda = 5
# a_sigma  = 3; b_sigma  = 4
# a_tau    = 3; b_tau    = 4
# a_lambda = 3; b_lambda = 4
# a_sigma  = 2; b_sigma  = 2
# a_tau    = 2; b_tau    = 2
# a_lambda = 2; b_lambda = 2
a_sigma  = 0.01; b_sigma  = 0.01
a_lambda = 0.1; b_lambda = 0.1
# # a_tau    = 0.1; b_tau    = 0.1
a_tau    = 2; b_tau    = 2
# a_tau    = 1; b_tau    = 1.5
# a_sigma  = 5; b_sigma  = 8
# a_tau    = 5; b_tau    = 8
# a_lambda = 5; b_lambda = 8
eta1_scale = 0.9
# mh is the of gaussian standard deviations for metropolis updates
# So these are not variances!
sig_mh_sig2 = 0.2
sig_mh_tau2 = 0.2
sig_mh_lambda2 = 0.2
sig_mh_eta1 = 0.1
sig_mh_phi1 = 0.1
update_eta1 = TRUE
update_phi1 = F
a_alpha = 2; b_alpha = 2
time_specific_alpha = TRUE
# now space
spatial_cohesion = 3
mu0 = 0
k0 = 1
v0 = 5
L0 = 1
tempo_inizio <- Sys.time()
drpm1 <- drpm_fit(
y=y,
s_coords = s_std,
M=1,
initial_partition = NULL,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = time_specific_alpha,
alpha_0=FALSE,
eta1_0=!(update_eta1),
phi1_0=!(update_phi1),
# modelPriors=c(0,100^2,1,1,1,1), # original default one
modelPriors=c(m0_phi0,s20_phi0,A_ub_sigma,A_ub_tau,A_ub_lambda,eta1_scale),
alphaPriors=rbind(c(a_alpha,b_alpha)), # if time_specific_alpha == TRUE
simpleModel = 0,
theta_tau2 = c(0, 2), # only used if simpleModel=1
SpatialCohesion=spatial_cohesion, # auxiliary similarity
# SpatialCohesion=4, # double dipper similarity
cParms=c(mu0, k0, v0, L0),
mh=c(sig_mh_sig2,sig_mh_tau2,sig_mh_lambda2,sig_mh_eta1,sig_mh_phi1),
verbose=TRUE,
# draws=2000,burn=1000,thin=1)
draws=niter,burn=nburn,thin=nthin)
tempo_inizio <- Sys.time()
drpm1 <- drpm_fit(
y=y,
s_coords = s_std,
M=1,
initial_partition = NULL,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = time_specific_alpha,
alpha_0=FALSE,
eta1_0=!(update_eta1),
phi1_0=!(update_phi1),
# modelPriors=c(0,100^2,1,1,1,1), # original default one
modelPriors=c(m0_phi0,s20_phi0,A_ub_sigma,A_ub_tau,A_ub_lambda,eta1_scale),
alphaPriors=rbind(c(a_alpha,b_alpha)), # if time_specific_alpha == TRUE
simpleModel = 0,
theta_tau2 = c(0, 2), # only used if simpleModel=1
SpatialCohesion=spatial_cohesion, # auxiliary similarity
# SpatialCohesion=4, # double dipper similarity
cParms=c(mu0, k0, v0, L0),
mh=c(sig_mh_sig2,sig_mh_tau2,sig_mh_lambda2,sig_mh_eta1,sig_mh_phi1),
verbose=TRUE,
draws=4000,burn=2000,thin=2)
draws=niter,burn=nburn,thin=nthin)
tempo_fine <- Sys.time()
differenza_tempo <- tempo_fine - tempo_inizio
cat(crayon::cyan("Fit took:\n"))
print(round(differenza_tempo,digits = 4))
cat(crayon::red("\nLPML =",drpm1$lpml, "\nWAIC =",drpm1$waic))
a_sigma  = 0.01; b_sigma = 0.01
a_tau    = 0.01; b_tau   = 0.3
a_lambda = 0.1; b_lambda = 0.1
module_JDRPM <- juliaImport(juliaCall("include", module))
