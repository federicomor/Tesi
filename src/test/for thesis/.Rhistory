main="model J",xlab = "units", ylab = "time instants",
# col = terrain.colors(length(unique(as.vector(heatmap_matrix)))))
col = cols)
####################################################################
partitions = partitions_drpmc
partition_matrix <- do.call(cbind, partitions)
num_units <- nrow(partition_matrix)
Tm <- ncol(partition_matrix)
# Set up the plot
par(mar=c(4,4,2,2))
plot(1:Tm, rep(NA, Tm), type = "n",
xlab = "Time Instants", ylab = "clusters", main="model C",
ylim = range(partition_matrix)+c(-0.1,0.1), xaxt = "n", yaxt = "n")
axis(1, at = 1:Tm, labels = 1:Tm)
axis(2, at = unique(as.vector(partition_matrix)), las = 2)
# Add grid lines for clarity
abline(h = unique(as.vector(partition_matrix)), col = "lightgray", lty = "dotted")
abline(v = 1:Tm, col = "lightgray", lty = "dotted")
# Plot lines and points for each unit
for (unit in 1:num_units) {
lines(1:Tm, partition_matrix[unit, ]+unit/80, type = "b", pch = 19,
col = unit, lwd = 1)
}
legend("topright", legend = paste("Unit", 1:num_units), col = 1:num_units,
lty = 1, lwd = 2, pch = 19, bty = "n")
partitions = partitions_drpmj
partition_matrix <- do.call(cbind, partitions)
num_units <- nrow(partition_matrix)
Tm <- ncol(partition_matrix)
# Set up the plot
par(mar=c(4,4,2,2))
plot(1:Tm, rep(NA, Tm), type = "n",
xlab = "Time Instants", ylab = "clusters", main="model J",
ylim = range(partition_matrix)+c(-0.1,0.1), xaxt = "n", yaxt = "n")
axis(1, at = 1:Tm, labels = 1:Tm)
axis(2, at = unique(as.vector(partition_matrix)), las = 2)
abline(h = unique(as.vector(partition_matrix)), col = "lightgray", lty = "dotted")
abline(v = 1:Tm, col = "lightgray", lty = "dotted")
for (unit in 1:num_units) {
lines(1:Tm, partition_matrix[unit, ]+unit/100, type = "b", pch = 19,
col = unit, lwd = 1)
}
legend("topright", legend = paste("Unit", 1:num_units), col = 1:num_units,
lty = 1, lwd = 2, pch = 19, bty = "n")
####################################################################
partitions = partitions_drpmc
partition_matrix <- do.call(cbind, partitions)
par(mar=c(3.8,1,3,1),mfrow=c(1,2))
plot(NULL, NULL, xlim = c(1, Tm), ylim = c(1, num_units)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = "model C")
axis(1, at = 1:Tm, labels = 1:Tm)
for (t in 1:Tm) {
for (unit in 1:num_units) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 1.5)
}
}
partitions = partitions_drpmj
partition_matrix <- do.call(cbind, partitions)
plot(NULL, NULL, xlim = c(1, Tm), ylim = c(1, num_units)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = "model J")
axis(1, at = 1:Tm, labels = 1:Tm)
for (t in 1:Tm) {
for (unit in 1:num_units) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 1.5)
}
}
N = 5
Tm = 6
generate_partition = function(model){
partition = list()
for (t in 1:Tm){
Si_jt <- model$Si[t, , ]
Si_jt <- t(Si_jt)
partition[[t]] <- salso(Sij_t, loss = "binder")
}
return(partition)
}
plot_partition_with_numbers = function(partition,title){
partition_matrix <- do.call(cbind, partition)
plot(NULL, NULL, xlim = c(1, Tm), ylim = c(1, N)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = title)
axis(1, at = 1:Tm, labels = 1:Tm)
for (t in 1:Tm) {
for (unit in 1:N) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 1.5)
}
}
}
parts = generate_partition(drpm1)
parts
t=1
model=drpm1
Si_jt <- model$Si[t, , ]
Si_jt <- t(Si_jt)
Si_jt
salso(Sij_t, loss = "binder")
N = 5
Tm = 6
generate_partition = function(model){
partition = list()
for (t in 1:Tm){
Si_jt <- model$Si[t, , ]
Si_jt <- t(Si_jt)
partition[[t]] <- salso(Si_jt, loss = "binder")
}
return(partition)
}
plot_partition_with_numbers = function(partition,title){
partition_matrix <- do.call(cbind, partition)
plot(NULL, NULL, xlim = c(1, Tm), ylim = c(1, N)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = title)
axis(1, at = 1:Tm, labels = 1:Tm)
for (t in 1:Tm) {
for (unit in 1:N) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 1.5)
}
}
}
parts = generate_partition(drpm1)
plot_partition_with_numbers(parts,title="model C")
N = 5
Tm = 6
generate_partition = function(model){
partition = list()
for (t in 1:Tm){
Si_jt <- model$Si[t, , ]
Si_jt <- t(Si_jt)
partition[[t]] <- salso(Si_jt, loss = "binder")
}
return(partition)
}
plot_partition_with_numbers = function(partition,title){
partition_matrix <- do.call(cbind, partition)
plot(NULL, NULL, xlim = c(1, Tm), ylim = c(1, N)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = title)
axis(1, at = 1:Tm, labels = 1:Tm)
for (t in 1:Tm) {
for (unit in 1:N) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 1.5)
}
}
}
plot_ARI = function(partition,title){
LEN = Tm
df_cluster = data.frame(clusters=c(),Time=c())
for(time in 1:Tm){
salso_out <- partition[[time]]
df_temp = data.frame(
clusters = salso_out
)
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
# clusters_now = df_temp$clusters
# n_clusters = unique(clusters_now)
# cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
library(mclust)
# build the ARI matrix
ARImats <- matrix(NA, nrow=LEN, ncol=LEN)
rho_ARI <- list()
for(k in 1:LEN){
rho_ARI[[k]] <- partition[[k]]
}
for(k in 1: LEN){
for(kk in 1: LEN){
ARImats[k,kk] <- adjustedRandIndex(rho_ARI[[k]], rho_ARI[[kk]])
}
}
ncols_ari = 100
# if (min(ARImats)<0){
# cols_ARI = colora(ncols_ari,79,0)
# brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# } else {
# cols_ARI = colora(ncols_ari,56,0)
# cols_ARI = rev(cols_ARI) # must be ordered from cold to warm
cols_ARI = rev(colora(ncols_ari,104,0)) # or 109
# cols_ARI = colora(ncols_ari,102,0)
# brks = seq(0,1,length.out=ncols_ari+1)
brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# }
# or see ?designer.colors for colors
library(fields)
image.plot(ARImats,
main=paste0("Lagged ARI values - ",title),axes=FALSE,col=cols_ARI,
breaks=brks)
mtext(text=c(paste("",1:LEN)), side=2, line=0.3,at=seq(0,1,length=LEN), las=1, cex=0.8)
mtext(text=c(paste("",1:LEN)), side=1, line=0.3,at=seq(0,1,length=LEN), las=2, cex=0.8)
}
parts = generate_partition(drpm1)
plot_partition_with_numbers(parts,title="model C")
plot_ARI(parts,title="model C")
N = 5
Tm = 6
generate_partition = function(model){
partition = list()
for (t in 1:Tm){
Si_jt <- model$Si[t, , ]
Si_jt <- t(Si_jt)
partition[[t]] <- salso(Si_jt, loss = "binder")
}
return(partition)
}
plot_partition_with_numbers = function(partition,title){
partition_matrix <- do.call(cbind, partition)
plot(NULL, NULL, xlim = c(1, Tm), ylim = c(1, N)+c(-0.5,0.5),
xlab = "time", ylab = "units",
xaxt = "n", yaxt = "n", main = title)
axis(1, at = 1:Tm, labels = 1:Tm)
for (t in 1:Tm) {
for (unit in 1:N) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 1.5)
}
}
}
plot_ARI = function(partition,title){
LEN = Tm
df_cluster = data.frame(clusters=c(),Time=c())
for(time in 1:Tm){
salso_out <- partition[[time]]
df_temp = data.frame(
clusters = salso_out
)
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
# clusters_now = df_temp$clusters
# n_clusters = unique(clusters_now)
# cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
library(mclust)
# build the ARI matrix
ARImats <- matrix(NA, nrow=LEN, ncol=LEN)
rho_ARI <- list()
for(k in 1:LEN){
rho_ARI[[k]] <- partition[[k]]
}
for(k in 1: LEN){
for(kk in 1: LEN){
ARImats[k,kk] <- adjustedRandIndex(rho_ARI[[k]], rho_ARI[[kk]])
}
}
ncols_ari = 100
# if (min(ARImats)<0){
# cols_ARI = colora(ncols_ari,79,0)
# brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# } else {
# cols_ARI = colora(ncols_ari,56,0)
# cols_ARI = rev(cols_ARI) # must be ordered from cold to warm
cols_ARI = rev(colora(ncols_ari,104,0)) # or 109
# cols_ARI = colora(ncols_ari,102,0)
# brks = seq(0,1,length.out=ncols_ari+1)
brks = seq(min(-1,floor(min(ARImats))),1,length.out=ncols_ari+1)
# }
# or see ?designer.colors for colors
library(fields)
image.plot(ARImats,
main=paste0("Lagged ARI values - ",title),axes=FALSE,col=cols_ARI,
breaks=brks)
mtext(text=c(paste("",1:LEN)), side=2, line=0.3,at=seq(0,1,length=LEN), las=1, cex=0.8)
mtext(text=c(paste("",1:LEN)), side=1, line=0.3,at=seq(0,1,length=LEN), las=2, cex=0.8)
}
parts = generate_partition(drpm1)
plot_partition_with_numbers(parts,title="model C")
plot_ARI(parts,title="model C")
#######################################################################################
#						    										 				  #
# Spatio-temporal data set with rural background PM10 concentrations in Germany 2005  #
#                           														  #
#######################################################################################
# Set working directory to folder "JCGS_Codes" folder.
# setwd("JCGS_Codes")
# source("Functions.R")
library(salso)
library(MCMCpack)
library(mclust)
devtools::load_all("../../drpm_main/")
library(JuliaConnectoR)
juliaSetupOk()
# juliaEval("using Pkg")
# juliaEval("Pkg.activate(\"../../JDRPM\")")
# juliaEval("Pkg.instantiate()")
# setup project
juliaEval("using Pkg; Pkg.status()")
juliaEval("Pkg.activate(\"../../JDRPM\")")
juliaEval("using Pkg; Pkg.status()")
module = normalizePath("../../JDRPM/src/JDRPM.jl")
module_JDRPM <- juliaImport(juliaCall("include", module))
# This data is found in the gstat package
library(gstat)
data(DE_RB_2005)
dat <- DE_RB_2005
# Create ymat with columns corresponding to time rows stations
N <- length(dat@sp)
Tm <- 365
y <- matrix(NA, nrow=N, ncol=Tm)
for(i in 1:Tm){
y[dat@index[dat@index[,2]==i,1], i] <- dat@data[dat@index[,2]==i,1]
}
# Try to create an average PM10 per month
year <- c(rep(1,31),rep(2,28),rep(3,31),rep(4,30),rep(5,31),
rep(6,30),rep(7,31),rep(8,31),rep(9,30),rep(10,31),
rep(11,30),rep(12,31))
week <- rep(1:52, each=7)
ymn <- t(apply(y, 1, function(x) tapply(x,year,mean, na.rm=TRUE)))
## Keep those that don't have any missing values when overageing over a month
ysub2 <- ymn[-c(4,16,25,27,30,43,52,59,69),]
mn <- apply(ysub2,2,mean)
sd <- apply(ysub2,2,sd)
# Center the observations
y <- t(t(ysub2) - mn)
tps <- ncol(y)
s_coords <- (dat@sp@coords)[-c(4,16,25,27,30,43,52,59,69),]
smn <- apply(s_coords,2,mean)
ssd <- apply(s_coords,2,sd)
s_std <- t((t(s_coords) - smn)/ssd)
# as.integer(runif(1,0,1000))*1.0
# seed = 881.0
seed = 314.0
cat("seed",seed,"\n")
# niter=30000; nburn=22000; nthin=8
# niter=120; nburn=20; nthin=2 # valori del file originale (?)
niter=2000; nburn=1000; nthin=4
nout <- (niter-nburn)/nthin
cat(nout,"valid iterations\n")
# params
m0_phi0 = 0
s20_phi0 = 1
A_ub_sigma = 5
A_ub_tau = 5
A_ub_lambda = 5
a_sigma  = 2; b_sigma  = 2
a_tau    = 2; b_tau    = 2
a_lambda = 2; b_lambda = 2
eta1_scale = 0.9
sig_mh_sig2 = 0.1
sig_mh_tau2 = 0.1
sig_mh_lambda2 = 0.1
sig_mh_eta1 = 0.1
sig_mh_phi1 = 0.1
update_eta1 = TRUE
update_phi1 = TRUE
a_alpha = 2; b_alpha = 2
# now space
sp = 4
mu0 = 0
k0 = 1
v0 = 5
L0 = 1
alpha = 0.0
set.seed(1)
C.models.out <- list()
hh <- 1
include("../src/include.R")
source("../src/include.R")
set.seed(1)
C.models.out <- list()
hh <- 1
# s="1"
# h <- "111"; s <- "0";
model <- "C"
h="111"
m.n <- as.numeric(strsplit(h, "")[[1]])
eta1Update <- m.n[1]!=0
phi1Update <- m.n[2]!=0
alphaUpdate <- m.n[3]!=0
if(s=="0"){
sc <- NULL
} else {
sc <- s_std
}
s="1"
if(s=="0"){
sc <- NULL
} else {
sc <- s_std
}
cat("model is ", h, "\n")
cat("space is ", s, "\n")
cat("seed is ", 1*hh, "\n")
set.seed(1*hh)
out = drpm_fit(
y=y,
s_coords = sc,
M=1,
initial_partition = NULL,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = FALSE,
alpha_0 = ifelse(alphaUpdate, 0, 1),
eta1_0 = ifelse(eta1Update, 0, 1),
phi1_0 = ifelse(phi1Update, 0, 1),
modelPriors=c(m0_phi0,s20_phi0,A_ub_sigma,A_ub_tau,A_ub_lambda,eta1_scale),
alphaPriors=rbind(c(a_alpha,b_alpha)),
simpleModel = 0,
SpatialCohesion=sp,
cParms=c(mu0, k0, v0, L0),
mh=c(sig_mh_sig2,sig_mh_tau2,sig_mh_lambda2,sig_mh_eta1,sig_mh_phi1),
draws=niter,burn=nburn,thin=nthin)
print(date())
# print(date())
cat("lpml = ", out$lpml, "\n")
cat("waic = ", out$waic, "\n\n\n")
C.models.out[[hh]] <-  out
names(C.models.out)[hh] <- paste0("out",h,"_",model)
pdf(paste0("PM10_", h,"_",s,"_",model,"_SC",sp,"_2.pdf"),
height=10, width=12.5)
pchs <- c(letters, paste0(letters,0:9))
par(mfrow=c(3,4))
for(jj in 1:tps){
cex1 <- ((y[,jj]-mean(y[,jj]))/sd(y[,jj])+3)/3
plot(s_std, col=rho[[jj]], pch=pchs[rho[[jj]]],cex=cex1,
main=bquote(alpha==.(amn[jj]) ~~ Time ~ .(jj)),
ylab="", xlab="")
}
# If there is desire to produce plot of each fit uncomment these lines
rho <- list()
# ccprob <- list()
#
for(k in 1:tps){
rho[[k]] <- salso(t(out$Si[k,,]), loss="binder")
}
pdf(paste0("PM10_", h,"_",s,"_",model,"_SC",sp,"_2.pdf"),
height=10, width=12.5)
pchs <- c(letters, paste0(letters,0:9))
par(mfrow=c(3,4))
for(jj in 1:tps){
cex1 <- ((y[,jj]-mean(y[,jj]))/sd(y[,jj])+3)/3
plot(s_std, col=rho[[jj]], pch=pchs[rho[[jj]]],cex=cex1,
main=bquote(alpha==.(amn[jj]) ~~ Time ~ .(jj)),
ylab="", xlab="")
}
amn <- round(apply(models.out[[hh]]$alpha,2,mean),2)
amn <- round(apply(C.models.out[[hh]]$alpha,2,mean),2)
pdf(paste0("PM10_", h,"_",s,"_",model,"_SC",sp,"_2.pdf"),
height=10, width=12.5)
pchs <- c(letters, paste0(letters,0:9))
par(mfrow=c(3,4))
for(jj in 1:tps){
cex1 <- ((y[,jj]-mean(y[,jj]))/sd(y[,jj])+3)/3
plot(s_std, col=rho[[jj]], pch=pchs[rho[[jj]]],cex=cex1,
main=bquote(alpha==.(amn[jj]) ~~ Time ~ .(jj)),
ylab="", xlab="")
}
dev.off()
pdf(paste0("PM10_", h,"_",s,"_",model,"_SC",sp,"_2.pdf"),
height=10, width=12.5)
# pchs <- c(letters, paste0(letters,0:9))
par(mfrow=c(3,4))
for(jj in 1:tps){
cex1 <- ((y[,jj]-mean(y[,jj]))/sd(y[,jj])+3)/3
plot(s_std, col=rho[[jj]], pch=19,cex=cex1,
# plot(s_std, col=rho[[jj]], pch=pchs[rho[[jj]]],cex=cex1,
main=bquote(alpha==.(amn[jj]) ~~ Time ~ .(jj)),
ylab="", xlab="")
}
dev.off()
pdf(paste0("PM10_", h,"_",s,"_",model,"_SC",sp,"_2.pdf"),
height=10, width=12.5)
# pchs <- c(letters, paste0(letters,0:9))
par(mfrow=c(3,4))
for(jj in 1:tps){
cex1 <- ((y[,jj]-mean(y[,jj]))/sd(y[,jj])+3)/2
plot(s_std, col=rho[[jj]], pch=19,cex=cex1,
# plot(s_std, col=rho[[jj]], pch=pchs[rho[[jj]]],cex=cex1,
main=bquote(alpha==.(amn[jj]) ~~ Time ~ .(jj)),
ylab="", xlab="")
}
dev.off()
pdf(paste0("PM10_", h,"_",s,"_",model,"_SC",sp,"_2.pdf"),
height=10, width=12.5)
# pchs <- c(letters, paste0(letters,0:9))
par(mfrow=c(3,4))
for(jj in 1:tps){
cex1 <- ((y[,jj]-mean(y[,jj]))/sd(y[,jj])+3)/3
plot(s_std, col=rho[[jj]], pch=19,cex=cex1,
# plot(s_std, col=rho[[jj]], pch=pchs[rho[[jj]]],cex=cex1,
# main=bquote(alpha==.(amn[jj]) ~~ Time ~ .(jj)),
main=bquote(~~ Time ~ .(jj)),
ylab="", xlab="")
}
dev.off()
devtools::load_all("../../drpm_main/")
out = drpm_fit(
y=y,
s_coords = sc,
M=1,
initial_partition = NULL,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = FALSE,
alpha_0 = ifelse(alphaUpdate, 0, 1),
eta1_0 = ifelse(eta1Update, 0, 1),
phi1_0 = ifelse(phi1Update, 0, 1),
modelPriors=c(m0_phi0,s20_phi0,A_ub_sigma,A_ub_tau,A_ub_lambda,eta1_scale),
alphaPriors=rbind(c(a_alpha,b_alpha)),
simpleModel = 0,
SpatialCohesion=sp,
cParms=c(mu0, k0, v0, L0),
mh=c(sig_mh_sig2,sig_mh_tau2,sig_mh_lambda2,sig_mh_eta1,sig_mh_phi1),
draws=niter,burn=nburn,thin=nthin)
