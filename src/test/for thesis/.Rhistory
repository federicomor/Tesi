par(mfrow=c(4,2),mar=c(2,2,2,2), mgp=c(1.5,0.5,0))
for(h in c("111","110","101","100","011","010","001","000")){
m.n <- as.numeric(strsplit(h, "")[[1]])
eta1Update <- m.n[1]==1
phi1Update <- m.n[2]==1
alphaUpdate <- m.n[3]==1
# convention of the C code:
# param_0 = 1 <=> we update it
# param_0 = 0 <=> we dont update it
if(s=="0"){
sc <- NULL
} else {
sc <- s_std
}
cat("model is ", h, "\n")
cat("space is ", s, "\n")
# cat("seed is ", 1*hh, "\n")
# set.seed(1*hh)
out = module_JDRPM$MCMC_fit(
Y=as.matrix(y),
sp_coords = sc,
M_dp = 1,
initial_partition = NA,
Xlk_covariates = NA,
Xcl_covariates = NA,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = FALSE,
update_alpha = alphaUpdate,
include_eta1 = TRUE,
include_phi1 = TRUE,
update_eta1 = eta1Update,
update_phi1 = phi1Update,
sig2h_priors = c(a_sigma,b_sigma),
eta1_priors = c(eta1_scale,sig_mh_eta1^2),
# beta_priors = c(rep(1,p),2),
beta_priors = NA,
tau2_priors = c(a_tau,b_tau),
phi0_priors = c(m0_phi0,s20_phi0),
phi1_priors = sig_mh_phi1^2,
lambda2_priors = c(a_lambda,b_lambda),
alpha_priors = c(a_alpha,b_alpha),
spatial_cohesion_idx = sp,
sp_params = list(c(mu0,mu0),k0,v0,matrix(c(L0,0.0,0.0,L0),nrow=2)),
draws = niter,burnin = nburn, thin = nthin,
logging = FALSE,
seed = seed
)
rout = juliaGet(out)
names(rout) = c("Si","gamma","alpha", "sigma2h", "muh", "eta1","beta",
"theta", "tau2", "phi0", "phi1","lambda2","fitted",
"llike","lpml","waic")
# reshape some stuff to uniform it to drpm output
rout$Si           = aperm(rout$Si,       c(2, 1, 3))
rout$gamma        = aperm(rout$gamma,    c(2, 1, 3))
rout$sigma2h      = aperm(rout$sigma2h,  c(2, 1, 3))
rout$muh          = aperm(rout$muh,      c(2, 1, 3))
rout$fitted       = aperm(rout$fitted,   c(2, 1, 3))
rout$llike        = aperm(rout$llike,    c(2, 1, 3))
if (is.null(size(rout$alpha))) {
# do nothing
# } else if size(rout$alpha) == 2 {
} else {
rout$alpha        = aperm(rout$alpha,    c(2, 1))
}
rout$theta        = aperm(rout$theta,    c(2, 1))
rout$tau2         = aperm(rout$tau2,     c(2, 1))
rout$eta1         = aperm(rout$eta1,    c(2, 1))
rout$phi0     = matrix(rout$phi0,    ncol = 1)
rout$phi1     = matrix(rout$phi1,    ncol = 1)
rout$lambda2  = matrix(rout$lambda2, ncol = 1)
J.models.out[[hh]] <-  out
names(J.models.out)[hh] <- paste0("out_",h,"_","sp",s,"_",model)
# If there is desire to produce plot of each fit uncomment these lines
rho <- list()
# ccprob <- list()
#
for(k in 1:tps){
rho[[k]] <- salso(t(rout$Si[k,,]), loss="binder")
}
# amn <- round(apply(C.models.out[[hh]]$alpha,2,mean),2)
# print(amn)
# pdf(paste0("PM10_", h,"_",s,"_",model,"_SC",sp,"_2.pdf"),
# 	    height=10, width=12.5)
# 		# pchs <- c(letters, paste0(letters,0:9))
# 		par(mfrow=c(3,4))
# 		for(jj in 1:tps){
# 			cex1 <- ((y[,jj]-mean(y[,jj]))/sd(y[,jj])+3)/3
# 			plot(s_std, col=rho[[jj]], pch=19,cex=cex1,
# 			# plot(s_std, col=rho[[jj]], pch=pchs[rho[[jj]]],cex=cex1,
# 						# main=bquote(alpha==.(amn[jj]) ~~ Time ~ .(jj)),
# 						main=bquote(~~ Time ~ .(jj)),
# 						ylab="", xlab="")
# 		}
# dev.off()
hh <- hh + 1
# plot stuff
m.n <- as.numeric(strsplit(h, "")[[1]])
header <- bquote("J | sp" * .(ifelse(s=="1",":Yes",":No")) * ", "
* eta[1]*.(ifelse(m.n[1]==1,":Yes",":No"))*","~
phi[1]*.(ifelse(m.n[2]==1,":Yes",":No"))*","~
alpha[t]*.(ifelse(m.n[3]==1,":Yes",":No")))
parts = generate_partition(rout)
plot_ARI(parts,header)
}
dev.off()
}
tempo_fine <- Sys.time()
differenza_tempo <- tempo_fine - tempo_inizio
cat(crayon::cyan("Fit took:\n"))
print(round(differenza_tempo,digits = 4))
library(salso)
library(RColorBrewer)
source("include.R")
devtools::load_all("../../drpm_main/")
library(JuliaConnectoR)
juliaSetupOk()
# juliaEval("using Pkg")
# juliaEval("Pkg.activate(\"../../JDRPM\")")
# juliaEval("Pkg.instantiate()")
juliaEval("Pkg.status()")
# setup project
juliaEval("using Pkg; Pkg.status()")
juliaEval("Pkg.activate(\"../../JDRPM\")")
juliaEval("using Pkg; Pkg.status()")
module = normalizePath("../../JDRPM/src/JDRPM.jl")
module_JDRPM <- juliaImport(juliaCall("include", module))
seed = as.integer(runif(1,0,1000))*1.0
seed = 398.0
# seed = 881.0
set.seed(seed)
cat(seed)
source("../Supplementary material/Functions.R")
N <- 5; Tm<-6; M<-1;
alpha = 0.99
ndata <- 100
dat <- rtpartition1(N=N,M=M,rho=alpha,ntime=Tm,tau=5,sig=1,
Caron=FALSE,FirstPart=NULL,TYPE="Random",
phi0=0, phi1=1)
y<- t(dat$YMat)
cols = colora(N,seed = 56,show = 0)
yred=y
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],ylim=extrema(yred),type='l',xlab='weeks',ylab='pm10')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
##### at a new time 7
# y_with_na = cbind(y,rep(NA,5))
# y
# y_with_na
# module_JDRPM$test_R_to_J_conversion(as.matrix(y_with_na))
##### deleting values at existent time t, to maybe study MSE
t = 4
y_with_na = y
y_with_na[,t] = rep(NA,5)
##### just some NA
y_with_na = y
y_with_na[3,3] = NA
y_with_na[1,2] = NA
y_with_na[5,5] = NA
y
y_with_na
# niter=40000; nburn=28000; nthin=12
niter=50000; nburn=38000; nthin=12
# niter=30000; nburn=22000; nthin=8
# niter=10000; nburn=2000; nthin=8
# niter=1000; nburn=200; nthin=4
nout <- (niter-nburn)/nthin
cat(nout,"valid iterations\n")
# params
m0_phi0 = 0
s20_phi0 = 10
A_ub_sigma = 5
A_ub_tau = 5
A_ub_lambda = 5
a_sigma  = 2; b_sigma  = 2
a_tau    = 2; b_tau    = 2
a_lambda = 2; b_lambda = 2
eta1_scale = 0.9
sig_mh_sig2 = 0.1
sig_mh_tau2 = 0.1
sig_mh_lambda2 = 0.1
sig_mh_eta1 = 0.1
sig_mh_phi1 = 0.1
update_eta1 = TRUE
update_phi1 = TRUE
mu0 = 0
k0 = 1
v0 = 5
L0 = 1
a_alpha = 2; b_alpha = 2
tempo_inizio <- Sys.time()
drpm1 <- drpm_fit(
y=y,
# y=y_with_na,
# s_coords = NA,
M=1,
initial_partition = NULL,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = 0,
alpha_0=FALSE,
eta1_0=!(update_eta1),
phi1_0=!(update_phi1),
# modelPriors=c(0,100^2,1,1,1,1), # original default one
modelPriors=c(m0_phi0,s20_phi0,A_ub_sigma,A_ub_tau,A_ub_lambda,eta1_scale),
alphaPriors=rbind(c(a_alpha,b_alpha)), # if time_specific_alpha == TRUE
simpleModel = 0,
theta_tau2 = c(0, 2), # only used if simpleModel=1
SpatialCohesion=3, # auxiliary similarity
# SpatialCohesion=4, # double dipper similarity
cParms=c(mu0, k0, v0, L0),
mh=c(sig_mh_sig2,sig_mh_tau2,sig_mh_lambda2,sig_mh_eta1,sig_mh_phi1),
verbose=TRUE,
draws=niter,burn=nburn,thin=nthin)
tempo_fine <- Sys.time()
differenza_tempo <- tempo_fine - tempo_inizio
cat(crayon::cyan("Fit took:\n"))
print(round(differenza_tempo,digits = 4))
cat(crayon::red("\nLPML =",drpm1$lpml, "\nWAIC =",drpm1$waic))
module_JDRPM <- juliaImport(juliaCall("include", module))
out = module_JDRPM$MCMC_fit(
Y=as.matrix(y),
# Y=as.matrix(y_with_na),
sp_coords = NA,
M_dp = 1,
initial_partition = NA,
Xlk_covariates = NA,
Xcl_covariates = NA,
# initial_partition = c(1,2,1,2,2),
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = FALSE,
update_alpha = TRUE,
include_eta1 = TRUE,
include_phi1 = TRUE,
update_eta1 = update_eta1,
update_phi1 = update_phi1,
sig2h_priors = c(a_sigma,b_sigma),
eta1_priors = c(eta1_scale,sig_mh_eta1^2),
# beta_priors = c(rep(1,p),2),
beta_priors = NA,
tau2_priors = c(a_tau,b_tau),
phi0_priors = c(m0_phi0,s20_phi0),
phi1_priors = sig_mh_phi1^2,
lambda2_priors = c(a_lambda,b_lambda),
alpha_priors = c(a_alpha,b_alpha),
# spatial_cohesion_idx = 4,
# sp_params = list(c(1,2),1,2,matrix(c(1,2,2,4),nrow=2)),
# covariate_similarity_idx = NA,
draws = niter,	burnin = nburn,thin = nthin,
# draws = 100000,	burnin = 60000,thin = 40,
logging = FALSE,
seed = 333.0
)
module_JDRPM <- juliaImport(juliaCall("include", module))
out = module_JDRPM$MCMC_fit(
Y=as.matrix(y),
# Y=as.matrix(y_with_na),
sp_coords = NA,
M_dp = 1,
initial_partition = NA,
Xlk_covariates = NA,
Xcl_covariates = NA,
# initial_partition = c(1,2,1,2,2),
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = FALSE,
update_alpha = TRUE,
include_eta1 = TRUE,
include_phi1 = TRUE,
update_eta1 = update_eta1,
update_phi1 = update_phi1,
sig2h_priors = c(a_sigma,b_sigma),
eta1_priors = c(eta1_scale,sig_mh_eta1^2),
# beta_priors = c(rep(1,p),2),
beta_priors = NA,
tau2_priors = c(a_tau,b_tau),
phi0_priors = c(m0_phi0,s20_phi0),
phi1_priors = sig_mh_phi1^2,
lambda2_priors = c(a_lambda,b_lambda),
alpha_priors = c(a_alpha,b_alpha),
# spatial_cohesion_idx = 4,
# sp_params = list(c(1,2),1,2,matrix(c(1,2,2,4),nrow=2)),
# covariate_similarity_idx = NA,
draws = niter,	burnin = nburn,thin = nthin,
# draws = 100000,	burnin = 60000,thin = 40,
logging = FALSE,
seed = 333.0
)
currwd = getwd()
setwd("C:/Users/feder/Desktop/Uni magistrale/Tesi/src/test/Supplementary material/")
source("Functions.R")
library(salso)
library(drpm)
library(MCMCpack)
library(mclust)
# This data is found in the gstat package
library(gstat)
data(DE_RB_2005)
dat <- DE_RB_2005
# Create ymat with columns corresponding to time rows stations
N <- length(dat@sp)
Tm <- 365
y <- matrix(NA, nrow=N, ncol=Tm)
for(i in 1:Tm){
y[dat@index[dat@index[,2]==i,1], i] <- dat@data[dat@index[,2]==i,1]
}
# Try to create an average PM10 per month
year <- c(rep(1,31),rep(2,28),rep(3,31),rep(4,30),rep(5,31),
rep(6,30),rep(7,31),rep(8,31),rep(9,30),rep(10,31),
rep(11,30),rep(12,31))
week <- rep(1:52, each=7)
ymn <- t(apply(y, 1, function(x) tapply(x,year,mean, na.rm=TRUE)))
## Keep those that don't have any missing values when overageing over a month
ysub2 <- ymn[-c(4,16,25,27,30,43,52,59,69),]
mn <- apply(ysub2,2,mean)
sd <- apply(ysub2,2,sd)
# Center the observations
y <- t(t(ysub2) - mn)
Tm = tps <- ncol(y) # time span
N = size(y)[1] # number of units
s_coords <- (dat@sp@coords)[-c(4,16,25,27,30,43,52,59,69),]
smn <- apply(s_coords,2,mean)
ssd <- apply(s_coords,2,sd)
s_std <- t((t(s_coords) - smn)/ssd)
setwd(currwd)
cat(size(y),"\n")
cat("N =",N,"\n")
cat("T =",Tm,"\n")
### subset test
# sub_k = 1
# y = y[1:sub_k,]
# s_std = s_std[1:sub_k,]
# as.integer(runif(1,0,1000))*1.0
# seed = 881.0
seed = 314.0
cat("seed",seed,"\n")
# niter=50000; nburn=34000; nthin=8
niter=30000; nburn=22000; nthin=8
# niter=50000; nburn=10000; nthin=40 # they did this in their tests
# niter=40000; nburn=32000; nthin=8
nout <- (niter-nburn)/nthin
cat(nout,"valid iterations\n")
# params
m0_phi0 = 0
s20_phi0 = 10
A_ub_sigma = 5
A_ub_tau = 5
A_ub_lambda = 5
a_sigma  = 2; b_sigma  = 2
a_tau    = 2; b_tau    = 2
a_lambda = 2; b_lambda = 2
eta1_scale = 0.9
sig_mh_sig2 = 0.1
sig_mh_tau2 = 0.1
sig_mh_lambda2 = 0.1
sig_mh_eta1 = 0.1
sig_mh_phi1 = 0.1
update_eta1 = TRUE
update_phi1 = TRUE
a_alpha = 2; b_alpha = 2
# now space
spatial_cohesion = 3
mu0 = 0
k0 = 1
v0 = 5
L0 = 1
tempo_inizio <- Sys.time()
drpm1 <- drpm_fit(
y=y,
s_coords = s_std,
M=1,
initial_partition = NULL,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = TRUE,
alpha_0=FALSE,
eta1_0=!(update_eta1),
phi1_0=!(update_phi1),
# modelPriors=c(0,100^2,1,1,1,1), # original default one
modelPriors=c(m0_phi0,s20_phi0,A_ub_sigma,A_ub_tau,A_ub_lambda,eta1_scale),
alphaPriors=rbind(c(a_alpha,b_alpha)), # if time_specific_alpha == TRUE
simpleModel = 0,
theta_tau2 = c(0, 2), # only used if simpleModel=1
SpatialCohesion=spatial_cohesion, # auxiliary similarity
# SpatialCohesion=4, # double dipper similarity
cParms=c(mu0, k0, v0, L0),
mh=c(sig_mh_sig2,sig_mh_tau2,sig_mh_lambda2,sig_mh_eta1,sig_mh_phi1),
verbose=TRUE,
draws=niter,burn=nburn,thin=nthin)
tempo_fine <- Sys.time()
differenza_tempo <- tempo_fine - tempo_inizio
cat(crayon::cyan("Fit took:\n"))
print(round(differenza_tempo,digits = 4))
cat(crayon::red("\nLPML =",drpm1$lpml, "\nWAIC =",drpm1$waic))
module_JDRPM <- juliaImport(juliaCall("include", module))
module_JDRPM <- juliaImport(juliaCall("include", module))
out = module_JDRPM$MCMC_fit(
Y=as.matrix(y),
sp_coords = s_std,
M_dp = 1,
initial_partition = NA,
Xlk_covariates = NA,
Xcl_covariates = NA,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = TRUE,
update_alpha = TRUE,
include_eta1 = TRUE,
include_phi1 = TRUE,
update_eta1 = update_eta1,
update_phi1 = update_phi1,
sig2h_priors = c(a_sigma,b_sigma),
eta1_priors = c(eta1_scale,sig_mh_eta1^2),
# beta_priors = c(rep(1,p),2),
beta_priors = NA,
tau2_priors = c(a_tau,b_tau),
phi0_priors = c(m0_phi0,s20_phi0),
phi1_priors = sig_mh_phi1^2,
lambda2_priors = c(a_lambda,b_lambda),
alpha_priors = c(a_alpha,b_alpha),
# spatial_cohesion_idx = spatial_cohesion,
# sp_params = list(c(mu0,mu0),k0,v0,matrix(c(L0,0.0,0.0,L0),nrow=2)),
spatial_cohesion_idx = 1,
sp_params = list(0.1),
# covariate_similarity_idx = NA,
# draws = 2,burnin = 0, thin = 1,
draws = niter,burnin = nburn, thin = nthin,
logging = FALSE,
seed = seed,
simple_return = TRUE
)
module_JDRPM <- juliaImport(juliaCall("include", module))
out = module_JDRPM$MCMC_fit(
Y=as.matrix(y),
sp_coords = s_std,
M_dp = 1,
initial_partition = NA,
Xlk_covariates = NA,
Xcl_covariates = NA,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = TRUE,
update_alpha = TRUE,
include_eta1 = TRUE,
include_phi1 = TRUE,
update_eta1 = update_eta1,
update_phi1 = update_phi1,
sig2h_priors = c(a_sigma,b_sigma),
eta1_priors = c(eta1_scale,sig_mh_eta1^2),
# beta_priors = c(rep(1,p),2),
beta_priors = NA,
tau2_priors = c(a_tau,b_tau),
phi0_priors = c(m0_phi0,s20_phi0),
phi1_priors = sig_mh_phi1^2,
lambda2_priors = c(a_lambda,b_lambda),
alpha_priors = c(a_alpha,b_alpha),
# spatial_cohesion_idx = spatial_cohesion,
# sp_params = list(c(mu0,mu0),k0,v0,matrix(c(L0,0.0,0.0,L0),nrow=2)),
spatial_cohesion_idx = 1,
sp_params = list(0.1),
# covariate_similarity_idx = NA,
# draws = 2,burnin = 0, thin = 1,
draws = niter,burnin = nburn, thin = nthin,
logging = FALSE,
seed = seed,
simple_return = TRUE
)
module_JDRPM <- juliaImport(juliaCall("include", module))
out = module_JDRPM$MCMC_fit(
Y=as.matrix(y),
sp_coords = s_std,
M_dp = 1,
initial_partition = NA,
Xlk_covariates = NA,
Xcl_covariates = NA,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = TRUE,
update_alpha = TRUE,
include_eta1 = TRUE,
include_phi1 = TRUE,
update_eta1 = update_eta1,
update_phi1 = update_phi1,
sig2h_priors = c(a_sigma,b_sigma),
eta1_priors = c(eta1_scale,sig_mh_eta1^2),
# beta_priors = c(rep(1,p),2),
beta_priors = NA,
tau2_priors = c(a_tau,b_tau),
phi0_priors = c(m0_phi0,s20_phi0),
phi1_priors = sig_mh_phi1^2,
lambda2_priors = c(a_lambda,b_lambda),
alpha_priors = c(a_alpha,b_alpha),
# spatial_cohesion_idx = spatial_cohesion,
# sp_params = list(c(mu0,mu0),k0,v0,matrix(c(L0,0.0,0.0,L0),nrow=2)),
spatial_cohesion_idx = 1,
sp_params = list(0.1),
# covariate_similarity_idx = NA,
draws = 200,burnin = 0, thin = 1,
# draws = niter,burnin = nburn, thin = nthin,
logging = FALSE,
seed = seed,
simple_return = TRUE
)
niter
nburn
