# loss = "VI",
maxNClusters = maxNClusters
)
df_temp = data.frame(
clusters = salso_out
)
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
n_clusters = unique(clusters_now)
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
library(mclust)
# build the ARI matrix
ARImats <- matrix(NA, nrow=LEN, ncol=LEN)
rho_ARI <- list()
for(k in 1:LEN){
rho_ARI[[k]] <- salso(t(FIT$Si[k,,]),
loss=binder(a=1),
# loss=loss,
# loss="VI.lb",
maxNClusters = maxNClusters
) # adjust with your fit $Si dimension
}
for(k in 1: LEN){
for(kk in 1: LEN){
ARImats[k,kk] <- adjustedRandIndex(rho_ARI[[k]], rho_ARI[[kk]])
}
}
ncols_ari = 100
if (min(ARImats)<0){
cols_ARI = colora(ncols_ari,79,0)
brks = seq(floor(min(ARImats)),1,length.out=ncols_ari+1)
} else {
cols_ARI = colora(ncols_ari,56,0)
cols_ARI = rev(cols_ARI) # must be ordered from cold to warm
brks = seq(0,1,length.out=ncols_ari+1)
}
# or see ?designer.colors for colors
library(fields)
image.plot(ARImats,
main=paste0("Lagged ARI values - ",model_name),axes=FALSE,col=cols_ARI,
breaks=brks)
mtext(text=c(paste("",1:LEN)), side=2, line=0.3,at=seq(0,1,length=LEN), las=1, cex=0.8)
mtext(text=c(paste("",1:LEN)), side=1, line=0.3,at=seq(0,1,length=LEN), las=2, cex=0.8)
##########################################################
# take last sample (maybe not the best choice)
yred=t(drpm1$fitted[,,size(FIT$fitted)[3]-1])
par(mar=c(4,4,4,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
ylim=extrema(yred),type='l',xlab='time',ylab="fitted values",main="model C")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# take last sample (maybe not the best choice)
yred=t(rout$fitted[,,size(FIT$fitted)[3]])
par(mar=c(4,4,4,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
ylim=extrema(yred),type='l',xlab='time',ylab="fitted values",main="model J")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# original real data
cols = colora(N,seed = 56,show = 0)
yred=y
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],ylim=extrema(yred),type='l',
xlab='time',ylab='values',main="original data")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
seed = as.integer(runif(1,0,1000))*1.0
seed = 398.0
set.seed(seed)
cat(seed)
source("../Supplementary material/Functions.R")
N <- 5; Tm<-6; M<-1;
alpha = 0.99
ndata <- 100
dat <- rtpartition1(N=N,M=M,rho=alpha,ntime=Tm,tau=5,sig=1,
Caron=FALSE,FirstPart=NULL,TYPE="Random",
phi0=0, phi1=1)
y<- t(dat$YMat)
cols = colora(N,seed = 56,show = 0)
yred=y
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],ylim=extrema(yred),type='l',xlab='weeks',ylab='pm10')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# Initialize a list to store the partitions for each time instant
partitions_drpmc <- list()
partitions_drpmj <- list()
# Loop over each time instant to extract the consensus partition
for (t in 1:6) {
Sic_t <- drpm1$Si[t, , ]
Sic_t <- t(Sic_t)
partitions_drpmc[[t]] <- salso(Sic_t, loss = "binder")
Sij_t <- rout$Si[t, , ]
Sij_t <- t(Sij_t)
partitions_drpmj[[t]] <- salso(Sij_t, loss = "binder")
}
heatmap_matrix <- do.call(rbind, partitions_drpmc)
# Generate the heatmap
heatmap(heatmap_matrix, Rowv = NA, Colv = NA, scale = "none",
main="model C", xlab = "units", ylab = "time instants",
col = terrain.colors(length(unique(as.vector(heatmap_matrix)))))
heatmap_matrix <- do.call(rbind, partitions_drpmj)
# Generate the heatmap
heatmap(heatmap_matrix, Rowv = NA, Colv = NA, scale = "none",
main="model J",xlab = "units", ylab = "time instants",
col = terrain.colors(length(unique(as.vector(heatmap_matrix)))))
####################################################################
partitions = partitions_drpmc
partition_matrix <- do.call(cbind, partitions)
num_units <- nrow(partition_matrix)
num_time_instants <- ncol(partition_matrix)
# Set up the plot
par(mar=c(4,4,2,2))
plot(1:num_time_instants, rep(NA, num_time_instants), type = "n",
xlab = "Time Instants", ylab = "clusters", main="model C",
ylim = range(partition_matrix)+c(-0.1,0.1), xaxt = "n", yaxt = "n")
axis(1, at = 1:num_time_instants, labels = 1:num_time_instants)
axis(2, at = unique(as.vector(partition_matrix)), las = 2)
# Add grid lines for clarity
abline(h = unique(as.vector(partition_matrix)), col = "lightgray", lty = "dotted")
abline(v = 1:num_time_instants, col = "lightgray", lty = "dotted")
# Plot lines and points for each unit
for (unit in 1:num_units) {
lines(1:num_time_instants, partition_matrix[unit, ]+unit/80, type = "b", pch = 19,
col = unit, lwd = 1)
}
legend("topright", legend = paste("Unit", 1:num_units), col = 1:num_units,
lty = 1, lwd = 2, pch = 19, bty = "n")
partitions = partitions_drpmj
partition_matrix <- do.call(cbind, partitions)
num_units <- nrow(partition_matrix)
num_time_instants <- ncol(partition_matrix)
# Set up the plot
par(mar=c(4,4,2,2))
plot(1:num_time_instants, rep(NA, num_time_instants), type = "n",
xlab = "Time Instants", ylab = "clusters", main="model J",
ylim = range(partition_matrix)+c(-0.1,0.1), xaxt = "n", yaxt = "n")
axis(1, at = 1:num_time_instants, labels = 1:num_time_instants)
axis(2, at = unique(as.vector(partition_matrix)), las = 2)
abline(h = unique(as.vector(partition_matrix)), col = "lightgray", lty = "dotted")
abline(v = 1:num_time_instants, col = "lightgray", lty = "dotted")
for (unit in 1:num_units) {
lines(1:num_time_instants, partition_matrix[unit, ]+unit/100, type = "b", pch = 19,
col = unit, lwd = 1)
}
legend("topright", legend = paste("Unit", 1:num_units), col = 1:num_units,
lty = 1, lwd = 2, pch = 19, bty = "n")
####################################################################
partitions = partitions_drpmc
partition_matrix <- do.call(cbind, partitions)
par(mar=c(3.8,1,3,1),mfrow=c(1,2))
plot(NULL, NULL, xlim = c(1, num_time_instants), ylim = c(1, num_units)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = "model C")
axis(1, at = 1:num_time_instants, labels = 1:num_time_instants)
for (t in 1:num_time_instants) {
for (unit in 1:num_units) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 1.5)
}
}
partitions = partitions_drpmj
partition_matrix <- do.call(cbind, partitions)
plot(NULL, NULL, xlim = c(1, num_time_instants), ylim = c(1, num_units)+c(-0.5,0.5),
xlab = "Time Instants", ylab = "Units",
xaxt = "n", yaxt = "n", main = "model J")
axis(1, at = 1:num_time_instants, labels = 1:num_time_instants)
for (t in 1:num_time_instants) {
for (unit in 1:num_units) {
text(x = t, y = unit, labels = as.character(unit),
col = partition_matrix[unit, t], cex = 1.5)
}
}
seed = as.integer(runif(1,0,1000))*1.0
seed = 398.0
set.seed(seed)
cat(seed)
source("../Supplementary material/Functions.R")
N <- 5; Tm<-6; M<-1;
alpha = 0.99
ndata <- 100
dat <- rtpartition1(N=N,M=M,rho=alpha,ntime=Tm,tau=5,sig=1,
Caron=FALSE,FirstPart=NULL,TYPE="Random",
phi0=0, phi1=1)
y<- t(dat$YMat)
cols = colora(N,seed = 56,show = 0)
yred=y
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],ylim=extrema(yred),type='l',xlab='weeks',ylab='pm10')
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
yred=t(drpm1$fitted[,,size(FIT$fitted)[3]])
par(mar=c(4,4,4,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
ylim=extrema(yred),type='l',xlab='time',ylab="fitted values",main="model C")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
y
# original real data
cols = colora(N,seed = 56,show = 0)
yred=y
cols = colora(size(yred)[1],56,0)
yred
size(yred)
# original real data
cols = colora(N,seed = 56,show = 0)
yred=y
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],ylim=extrema(yred),type='l',
xlab='time',ylab='values',main="original data")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# take last sample (maybe not the best choice)
yred=t(drpm1$fitted[,,size(FIT$fitted)[3]])
par(mar=c(4,4,4,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
ylim=extrema(yred),type='l',xlab='time',ylab="fitted values",main="model C")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# take last sample (maybe not the best choice)
yred=t(rout$fitted[,,size(FIT$fitted)[3]])
par(mar=c(4,4,4,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
ylim=extrema(yred),type='l',xlab='time',ylab="fitted values",main="model J")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# original real data
cols = colora(N,seed = 56,show = 0)
yred=y
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],ylim=extrema(yred),type='l',
xlab='time',ylab='values',main="original data")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
##########################
model_name = "model C"
FIT = drpm1
LEN = Tm
maxNClusters = 5
##########################
df_cluster = data.frame(clusters=c(),Time=c())
for(time in 1:Tm){
salso_out <- salso(t(FIT$Si[time,,]),
loss=binder(a=1),
# loss=loss,
# loss="VI.lb",
# loss = "VI",
maxNClusters = maxNClusters
)
df_temp = data.frame(
clusters = salso_out
)
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
n_clusters = unique(clusters_now)
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
library(mclust)
# build the ARI matrix
ARImats <- matrix(NA, nrow=LEN, ncol=LEN)
rho_ARI <- list()
for(k in 1:LEN){
rho_ARI[[k]] <- salso(t(FIT$Si[k,,]),
loss=binder(a=1),
# loss=loss,
# loss="VI.lb",
maxNClusters = maxNClusters
) # adjust with your fit $Si dimension
}
for(k in 1: LEN){
for(kk in 1: LEN){
ARImats[k,kk] <- adjustedRandIndex(rho_ARI[[k]], rho_ARI[[kk]])
}
}
ncols_ari = 100
if (min(ARImats)<0){
cols_ARI = colora(ncols_ari,79,0)
brks = seq(floor(min(ARImats)),1,length.out=ncols_ari+1)
} else {
cols_ARI = colora(ncols_ari,56,0)
cols_ARI = rev(cols_ARI) # must be ordered from cold to warm
brks = seq(0,1,length.out=ncols_ari+1)
}
# or see ?designer.colors for colors
library(fields)
image.plot(ARImats,
main=paste0("Lagged ARI values - ",model_name),axes=FALSE,col=cols_ARI,
breaks=brks)
mtext(text=c(paste("",1:LEN)), side=2, line=0.3,at=seq(0,1,length=LEN), las=1, cex=0.8)
mtext(text=c(paste("",1:LEN)), side=1, line=0.3,at=seq(0,1,length=LEN), las=2, cex=0.8)
##########################
model_name = "model J"
FIT = rout
LEN = Tm
maxNClusters = 5
##########################
df_cluster = data.frame(clusters=c(),Time=c())
for(time in 1:Tm){
salso_out <- salso(t(FIT$Si[time,,]),
loss=binder(a=1),
# loss=loss,
# loss="VI.lb",
# loss = "VI",
maxNClusters = maxNClusters
)
df_temp = data.frame(
clusters = salso_out
)
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
n_clusters = unique(clusters_now)
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
}
library(mclust)
# build the ARI matrix
ARImats <- matrix(NA, nrow=LEN, ncol=LEN)
rho_ARI <- list()
for(k in 1:LEN){
rho_ARI[[k]] <- salso(t(FIT$Si[k,,]),
loss=binder(a=1),
# loss=loss,
# loss="VI.lb",
maxNClusters = maxNClusters
) # adjust with your fit $Si dimension
}
for(k in 1: LEN){
for(kk in 1: LEN){
ARImats[k,kk] <- adjustedRandIndex(rho_ARI[[k]], rho_ARI[[kk]])
}
}
ncols_ari = 100
if (min(ARImats)<0){
cols_ARI = colora(ncols_ari,79,0)
brks = seq(floor(min(ARImats)),1,length.out=ncols_ari+1)
} else {
cols_ARI = colora(ncols_ari,56,0)
cols_ARI = rev(cols_ARI) # must be ordered from cold to warm
brks = seq(0,1,length.out=ncols_ari+1)
}
# or see ?designer.colors for colors
library(fields)
image.plot(ARImats,
main=paste0("Lagged ARI values - ",model_name),axes=FALSE,col=cols_ARI,
breaks=brks)
mtext(text=c(paste("",1:LEN)), side=2, line=0.3,at=seq(0,1,length=LEN), las=1, cex=0.8)
mtext(text=c(paste("",1:LEN)), side=1, line=0.3,at=seq(0,1,length=LEN), las=2, cex=0.8)
##########################################################
# take last sample (maybe not the best choice)
yred=t(drpm1$fitted[,,size(FIT$fitted)[3]-2])
par(mar=c(4,4,4,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
ylim=extrema(yred),type='l',xlab='time',ylab="fitted values",main="model C")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# take last sample (maybe not the best choice)
yred=t(rout$fitted[,,size(FIT$fitted)[3]])
par(mar=c(4,4,4,2))
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],
ylim=extrema(yred),type='l',xlab='time',ylab="fitted values",main="model J")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
# original real data
cols = colora(N,seed = 56,show = 0)
yred=y
cols = colora(size(yred)[1],56,0)
for(i in 1:size(yred)[1]){
if(i==1){
plot(1:size(yred)[2],yred[i,],col=cols[i],ylim=extrema(yred),type='l',
xlab='time',ylab='values',main="original data")
}
else{
lines(1:size(yred)[2],yred[i,],col=cols[i])
}
}
module_JDRPM <- juliaImport(juliaCall("include", module))
tempo_inizio <- Sys.time()
drpm1 <- drpm_fit(
y=y,
# s_coords = NA,
M=1,
initial_partition = NULL,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = TRUE,
alpha_0=FALSE,
eta1_0=!(update_eta1),
phi1_0=!(update_phi1),
# modelPriors=c(0,100^2,1,1,1,1), # original default one
modelPriors=c(m0_phi0,s20_phi0,A_ub_sigma,A_ub_tau,A_ub_lambda,eta1_scale),
alphaPriors=rbind(c(a_alpha,b_alpha)), # if time_specific_alpha == TRUE
simpleModel = 0,
theta_tau2 = c(0, 2), # only used if simpleModel=1
SpatialCohesion=3, # auxiliary similarity
# SpatialCohesion=4, # double dipper similarity
cParms=c(mu0, k0, v0, L0),
mh=c(sig_mh_sig2,sig_mh_tau2,sig_mh_lambda2,sig_mh_eta1,sig_mh_phi1),
verbose=TRUE,
draws=niter,burn=nburn,thin=nthin)
tempo_fine <- Sys.time()
differenza_tempo <- tempo_fine - tempo_inizio
cat(crayon::cyan("Fit took:\n"))
print(round(differenza_tempo,digits = 4))
cat(crayon::red("\nLPML =",drpm1$lpml, "\nWAIC =",drpm1$waic))
niter=20000; nburn=10000; nthin=2
nout <- (niter-nburn)/nthin
cat(nout,"valid iterations\n")
tempo_inizio <- Sys.time()
drpm1 <- drpm_fit(
y=y,
# s_coords = NA,
M=1,
initial_partition = NULL,
starting_alpha = 0.5,
unit_specific_alpha = FALSE,
time_specific_alpha = TRUE,
alpha_0=FALSE,
eta1_0=!(update_eta1),
phi1_0=!(update_phi1),
# modelPriors=c(0,100^2,1,1,1,1), # original default one
modelPriors=c(m0_phi0,s20_phi0,A_ub_sigma,A_ub_tau,A_ub_lambda,eta1_scale),
alphaPriors=rbind(c(a_alpha,b_alpha)), # if time_specific_alpha == TRUE
simpleModel = 0,
theta_tau2 = c(0, 2), # only used if simpleModel=1
SpatialCohesion=3, # auxiliary similarity
# SpatialCohesion=4, # double dipper similarity
cParms=c(mu0, k0, v0, L0),
mh=c(sig_mh_sig2,sig_mh_tau2,sig_mh_lambda2,sig_mh_eta1,sig_mh_phi1),
verbose=TRUE,
draws=niter,burn=nburn,thin=nthin)
tempo_fine <- Sys.time()
differenza_tempo <- tempo_fine - tempo_inizio
cat(crayon::cyan("Fit took:\n"))
print(round(differenza_tempo,digits = 4))
cat(crayon::red("\nLPML =",drpm1$lpml, "\nWAIC =",drpm1$waic))
library(JuliaConnectoR)
juliaSetupOk()
# setup project
juliaEval("using Pkg; Pkg.status()")
